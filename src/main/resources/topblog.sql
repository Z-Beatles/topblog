/*
Navicat MySQL Data Transfer

Source Server         : mysql_localhost_3306
Source Server Version : 50716
Source Host           : localhost:3306
Source Database       : topblog

Target Server Type    : MYSQL
Target Server Version : 50716
File Encoding         : 65001

Date: 2017-08-23 17:02:56
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_admin
-- ----------------------------
DROP TABLE IF EXISTS `t_admin`;
CREATE TABLE `t_admin` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '序列id',
  `username` varchar(30) DEFAULT NULL COMMENT '用户名',
  `nickname` varchar(40) DEFAULT NULL COMMENT '昵称',
  `mobile` varchar(20) DEFAULT NULL COMMENT '电话',
  `email` varchar(50) DEFAULT NULL COMMENT '邮箱',
  `role_name` varchar(30) DEFAULT NULL COMMENT '权限名',
  `role_name_zh` varchar(30) DEFAULT NULL COMMENT '权限名_中文',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_admin
-- ----------------------------
INSERT INTO `t_admin` VALUES ('1', 'zhuwei', 'Wayne Chu', '15538107627', 'waynechu1996@gmail.com', 'admin', '管理员');

-- ----------------------------
-- Table structure for t_article
-- ----------------------------
DROP TABLE IF EXISTS `t_article`;
CREATE TABLE `t_article` (
  `article_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '文章ID',
  `article_title` varchar(60) DEFAULT NULL COMMENT '文章标题',
  `article_author_id` bigint(20) DEFAULT NULL COMMENT '作者ID',
  `article_category_id` smallint(6) DEFAULT NULL COMMENT '目录ID',
  `article_tag_id` varchar(60) DEFAULT NULL COMMENT '标签ID',
  `article_time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '发布时间',
  `article_content` text COMMENT '文章内容',
  PRIMARY KEY (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_article
-- ----------------------------
INSERT INTO `t_article` VALUES ('1', 'Class文件结构', '2', '12', null, '2017-08-19 19:21:58', 'Class文件是一组二进制流，各个数据项目中间没有添加任何分隔符，整个Class文件储存的内容几乎全部是程序运行的必要数据。\r\n\r\n## Class文件数据项\r\n\r\nClass文件由以下数据项构成，注：u2代表2个字节的无符号数；xx_ifo代表复合数据类型，它也是由多个数据项构成（可以理解为子表）\r\n\r\n| 类型             | 名称                  | 描述                                       | 数量                    |\r\n| -------------- | ------------------- | ---------------------------------------- | --------------------- |\r\n| u4             | magic               | 魔数，Class文件以0xCAFEBABE开头                  | 1                     |\r\n| u2             | minor_version       | 次版本号                                     | 1                     |\r\n| u2             | major_version       | 主版本号                                     | 1                     |\r\n| u2             | constant_pool_count | 常量池计数器                                   | 1                     |\r\n| cp_info        | constant_pool       | 常量池，主要存放的两大类常量：字面量(Literal)和符号引用(Symbolic  References) 字面量：作为右值出现，如字符串、数值等  符号引用：类和接口的全限定名、字段的名词和描述符、方法的名称和描述符 | constant_pool_count-1 |\r\n| u2             | access_flags        | 访问标志，用于标识类或接口的访问信息，如：该Class是类还是接口；是否定义为public；是否定义为abstract类型等 | 1                     |\r\n| u2             | this_class          | 类索引，用于确定当前类的全限定名                         | 1                     |\r\n| u2             | super_class         | 父类索引                                     | 1                     |\r\n| u2             | interfaces_count    | 接口计数器                                    | 1                     |\r\n| field_info     | field               | 字段表，用于描述类或接口中声明的全局变量，包括类变量（加static）和实例变量（不加static），注意不包括方法内部的局部变量。  能够描述字段的信息：字段作用域（public、private、protected修饰符）、实例变量还是类变量（static修饰符）、可变性（final修饰符）、并发可见性（volatile修饰符）、可否序列化（transient修饰符）、字段数据类型、字段名称 | fields_count          |\r\n| u2             | interfaces          | 接口索引集合                                   | interfaces_count      |\r\n| u2             | fields_count        | 字段计数器                                    | 1                     |\r\n| u2             | methods_count       | 方法计数器                                    | 1                     |\r\n| method_info    | methods             | 方法表，注意：方法里的Java代码，经过编译器编译成字节码指令后，存放在属性表的Code属性中 | methods_count         |\r\n| u2             | attributes_count    | 属性计数器                                    | 1                     |\r\n| attribute_info | attributes          | 属性表，在Class文件、字段表、方法表都可以携带自己的属性表集合，用于描述某些场景专有的信息 | attributes_count      |\r\n\r\n## 案例分析\r\n\r\n### java源代码\r\n\r\n```java\r\npackagecn.waynechu.test;\r\n\r\npublic class TestClass{\r\n    private int a;\r\n    public int inc(){\r\n        return a + 1;\r\n    }\r\n}\r\n```\r\n\r\n### javap输出常量表\r\n\r\n```shell\r\nC:\\Users\\waynechu\\Desktop>javap-v TestClass\r\n\r\n警告:二进制文件TestClass包含cn.waynechu.test.TestClass\r\n\r\nClassfile/C:/Users/waynechu/Desktop/TestClass.class\r\n\r\n  Last modified 2017-6-10; size 292 bytes\r\n\r\n  MD5 checksum 1452591e6bd49bdde6680c865fbdc5a9\r\n\r\n  Compiled from \"TestClass.java\"\r\n\r\npublic classcn.waynechu.test.TestClass\r\n\r\n  minor version: 0\r\n\r\n  major version: 52\r\n\r\n  flags: ACC_PUBLIC, ACC_SUPER\r\n\r\nConstant pool:\r\n\r\n   #1 = Methodref          #4.#15         //java/lang/Object.\"<init>\":()V\r\n\r\n   #2 = Fieldref           #3.#16         // cn/waynechu/test/TestClass.a:I\r\n\r\n   #3 = Class              #17            // cn/waynechu/test/TestClass\r\n\r\n   #4 = Class              #18            // java/lang/Object\r\n\r\n   #5 = Utf8               a\r\n\r\n   #6 = Utf8               I\r\n\r\n   #7 = Utf8               <init>\r\n\r\n   #8 = Utf8               ()V\r\n\r\n   #9 = Utf8               Code\r\n\r\n  #10 = Utf8               LineNumberTable\r\n\r\n  #11 = Utf8               inc\r\n\r\n  #12 = Utf8               ()I\r\n\r\n  #13 = Utf8               SourceFile\r\n\r\n  #14 = Utf8               TestClass.java\r\n\r\n  #15 = NameAndType        #7:#8          // \"<init>\":()V\r\n\r\n  #16 = NameAndType        #5:#6          // a:I\r\n\r\n  #17 = Utf8               cn/waynechu/test/TestClass\r\n\r\n  #18 = Utf8               java/lang/Object\r\n\r\n{\r\n\r\n  public cn.waynechu.test.TestClass();\r\n\r\n    descriptor: ()V\r\n\r\n    flags: ACC_PUBLIC\r\n\r\n    Code:\r\n\r\n      stack=1, locals=1, args_size=1\r\n\r\n         0: aload_0\r\n\r\n         1: invokespecial #1                  // Methodjava/lang/Object.\"<init>\":()V\r\n\r\n         4: return\r\n\r\n      LineNumberTable:\r\n\r\n        line 2: 0\r\n\r\n \r\n\r\n  public int inc();\r\n\r\n    descriptor: ()I\r\n\r\n    flags: ACC_PUBLIC\r\n\r\n    Code:\r\n\r\n      stack=2, locals=1,args_size=1                   \r\n\r\n         0: aload_0\r\n\r\n         1: getfield      #2                  // Field a:I\r\n\r\n         4: iconst_1\r\n\r\n         5: iadd\r\n\r\n         6: ireturn\r\n\r\n      LineNumberTable:\r\n\r\n        line 5: 0\r\n\r\n}\r\n\r\nSourceFile:\"TestClass.java\"\r\n```\r\n\r\n\r\n\r\n### 释义：常量池部分\r\n\r\nConstant pool:\r\n   \\#1  该常量为<init>方法的符号引用，()内为方法列表，V代表返回值类型为void\r\n   \\#2  该常量为a字段的符号引用\r\n   \\#3  该常量为TestClass类的符号引用\r\n   \\#4  该常量为Object类的符号引用\r\n   \\#5  该常量为UTF-8编码的字符串-实例变量a\r\n   \\#6   该常量为UTF-8编码的字符串-I在字段或方法的描述符中会使用到\r\n   \\#7  该常量为UTF-8编码的字符串-<init>实例构造方法\r\n   \\#8  该常量为类TestClass的描述符void\r\n   \\#9  该常量为方法表中的描述符-Code属性\r\n  \\#10 该常量用于Code属性标识Java源码的行号与字节码指令的对应关系\r\n  \\#11 该常量为inc方法名\r\n  \\#12 该常量为字段a的描述符-int，在方法表中的描述符会用到\r\n  \\#13 该常量为UTF-8编码的字符串SourceFile\r\n \\#14  该常量为UTF-8编码的字符串TestClass.java\r\n  \\#15 该常量表示标识符为void的<init>实例构造方法\r\n  \\#16  该常量表示标识符为int的a字段\r\n  \\#17 该常量为UTF-8编码的字符串1\r\n  \\#18 该常量为UTF-8编码的字符串\r\n\r\n### 释义：方法表部分\r\n\r\nargs_size参数列表大小为什么为1而不是0？\r\n\r\n实例方法可用通过this关键字访问到此方法所属的对象，Javac编译器编译时会把对this关键字的范围转变为对一个普通方法参数的访问，然后虚拟机调用实例方法时自动传入此参数。因此在实例方法的局部变量表中至少会存在一个指向当前对象的实例的局部变量，局部变量表中也会预留出一个Slot位来存放对象实例的引用。如果将声明方法为static，则args_size=0');
INSERT INTO `t_article` VALUES ('2', 'Java堆、栈和常量池以及相关String的详细讲解', '2', '12', null, '2017-08-19 19:26:42', '\r\n\r\nJava堆、栈和常量池详解（二）\r\n\r\n1. 栈(stack)与堆(heap)都是Java用来在RAM中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。\r\n\r\n2. 栈的优势是，存取速度比堆要快，仅次于直接位于CPU中的寄存器。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。另外，栈数据可以共享，详见第3点。\r\n\r\n   堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。\r\n\r\n3. Java中的数据类型有两种。\r\n\r\n   一种是基本类型(primitive types), 共有8种，即int, short, long, byte, float, double, boolean, char(注意，并没有string的基本类型)。这种类型的定义是通过诸如int a = 3; long b = 255L;的形式来定义的，称为自动变量。  \r\n\r\n   值得注意的是，自动变量存的是字面值，不是类的实例，即不是类的引用，这里并没有类的存在。如int a = 3; 这里的a是一个指向int类型的引用，指向3这个字面值。这些字面值的数据，由于大小可知，生存期可知(这些字面值固定定义在某个程序块里面，程序块退出后，字段值就消失了)，出于追求速度的原因，就存在于栈中。 \r\n\r\n   另外，栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义   int a = 3;   int b = 3； 编 译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。\r\n\r\n   特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与 b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。\r\n\r\n   另一种是包装类数据，如Integer, String, Double等将相应的基本数据类型包装起来的类。这些类数据全部存在于堆中，Java用new()语句来显示地告诉编译器，在运行时才根据需要动态创建，因此比较灵活，但缺点是要占用更多的时间。\r\n\r\n举例如下： \r\n\r\n```\r\npublic class Test {       \r\n	public static void main(String[] args){\r\n		int a1=1;         \r\n		int b1=1;         \r\n		int c1=2;         \r\n		int d1=a1+b1;         \r\n		Integer a = 1;           \r\n		Integer b = 2;           \r\n		Integer c = 3;           \r\n		Integer d = 3;           \r\n		Integer e = 321;           \r\n		Integer f = 321;\r\n		Long g = 3L;  \r\n\r\n		System.out.println(a1==b1);   //true  结果1           \r\n		System.out.println(c1==d1);   //true  结果2         \r\n		System.out.println(c==d);   //true  结果3            \r\n		System.out.println(e==f);   //false  结果4          \r\n	}  \r\n}\r\n```\r\n分析：\r\n\r\n   结果1：a1==b1如上面所述,会在栈中开辟存储空间存放数据。          \r\n\r\n   结果2：首先它会在栈中创建一个变量为c1的引用，然后查找有没有字面值为2的地址，没找到，就开辟一个存放2这个字面值的地址，然后将c1指向2的地址,d1为两个字面值相加也为2， 由于在栈中已经有2这个字面值，便将d1直接指向2的地址。这样，就出现了c1与d1同时均指向3的情况。\r\n\r\n   在分析下面结果以前让我们先对Java自动拆箱和装箱做个了结：在自动装箱时，把int变成Integer的时候，是有规则的，当你的int的值在-128-IntegerCache.high(127) 时，返回的不是一个新new出来的Integer对象，而是一个已经缓存在堆中的Integer对象，（我们可以这样理解，系统已经把-128到127之 间的Integer缓存到一个Integer数组中去了，如果你要把一个int变成一个Integer对象，首先去缓存中找，找到的话直接返回引用给你就 行了，不必再新new一个），如果不在-128-IntegerCache.high(127) 时会返回一个新new出来的Integer对象。\r\n\r\n   结果3：由于3是在范围内所以是从缓存中取数据的，c和d指向同一个对象，结果为true;         \r\n\r\n   结果4：由于321不是在范围内所以不是从缓存中取数据的而是单独有new对象，e和f并没有指向同一个对象，结果为false;  \r\n\r\n4. String是一个特殊的包装类数据。即可以用String str = new String(\"abc\");的形式来创建，也可以用String str = \"abc\"；的形式来创建(作为对比，在JDK 5.0之前，你从未见过Integer i = 3;的表达式，因为类与字面值是不能通用的，除了String。\r\n  \r\n   而在JDK 5.0中，这种表达式是可以的！因为编译器在后台进行Integer i = new Integer(3)的转换)。前者是规范的类的创建过程，即在Java中，一切都是对象，而对象是类的实例，全部通过new()的形式来创建。Java 中的有些类，如DateFormat类，可以通过该类的getInstance()方法来返回一个新创建的类，似乎违反了此原则。其实不然。该类运用了单例模式来返回类的实例，只不过这个实例是在该类内部通过new()来创建的，而getInstance()向外部隐藏了此细节。那为什么在String str = \"abc\"；中，并没有通过new()来创建实例，是不是违反了上述原则？其实没有。\r\n\r\n   4(2)String str = \"abc\"创建对象的过程   1 首先在常量池中查找是否存在内容为\"abc\"字符串对象   2 如果不存在则在常量池中创建\"abc\"，并让str引用该对象   3 如果存在则直接让str引用该对象\r\n\r\n   至于\"abc\"是怎么保存，保存在哪？常量池属于类信息的一部分，而类信息反映到JVM内存模型中是对应存在于JVM内存模型的方法区，也就是说这个类信息中的常量池概念是存在于在方法区中，而方法区是在JVM内存模型中的堆中由JVM来分配的，所以\"abc\"可以说存在于堆中（而有些资料，为了把方法区的堆区别于JVM的堆，把方法区称为栈）。一般这种情况下，\"abc\"在编译时就被写入字节码中，所以class被加载时，JVM就为\"abc\"在常量池中分配内存，所以和静态区差不多。  \r\n\r\n   String str = new String(\"abc\")创建实例的过程 1 首先在堆中（不是常量池）创建一个指定的对象\"abc\"，并让str引用指向该对象 2 在字符串常量池中查看，是否存在内容为\"abc\"字符串对象 3 若存在，则将new出来的字符串对象与字符串常量池中的对象联系起来 4 若不存在，则在字符串常量池中创建一个内容为\"abc\"的字符串对象，并将堆中的对象与之联系起来 intern 方法可以返回该字符串在常量池中的对象的引用，可以通过下面代码简单的测试 Java代码 \r\n\r\n```\r\nclass StringTest {     \r\n	public static void main(String[] args) {         \r\n		String str1 = \"abc\";         \r\n		String str2 = new String(\"abc\").intern();         \r\n		System.out.println(str1==str2);     \r\n  } \r\n} \r\n```\r\n\r\n  一个初始为空的字符串池，它由类 String 私有地维护。 当调用 intern 方法时，如果池已经包含一个等于此 String 对象的字符串（用 equals(Object) 方法确定），则返回池中的字符串。否则，将此 String 对象添加到池中，并返回此 String 对象的引用。 它遵循以下规则：对于任意两个字符串 s 和 t ，当且仅当  s.equals(t) 为 true 时，s.intern() == t.intern() 才为 true 。   所以String str1 = \"abc\"，str1引用的是常量池（方法区）的对象，而String str2 = new String(\"abc\")，str2引用的是堆中的对象，所以内存地址不一样，但是内容一样，所以==为false，而equals是true\r\n\r\n4(3)String str1 = \"abc\"; String str2 = \"ab\" + \"c\"; str1==str2是ture 是因为String str2 = \"ab\" + \"c\"会查找常量池中时候存在内容为\"abc\"字符串对象，如存在则直接让str2引用该对象，显然String str1 = \"abc\"的时候，上面说了，会在常量池中创建\"abc\"对象，所以str1引用该对象，str2也引用该对象，所以str1==str2\r\n\r\n4(4)String str1 = \"abc\"; String str2 = \"ab\"; String str3 = str2 + \"c\"; str1==str3是false 是因为String str3 = str2 + \"c\"涉及到变量（不全是常量）的相加，所以会生成新的对象，其内部实现是先new一个StringBuilder，然后 append(str2),append(\"c\");然后让str3引用toString()返回的对象 如果想了解更多的细节，可以自己查看反编译的代码，查看反编译代码可以用javap，\r\n\r\n 即 javap -c -verbose 要查看的类文件(.class不要)\r\n\r\n比如上面的代码的示例\r\n\r\njavac StringTest.java //编译\r\n\r\njavap -c -verbose StringTest //反编译\r\n\r\n4(5)String str1 = \"abc\";\r\n\r\n      String str2 = \"abc\";\r\n\r\n     System.out.println(str1==str2);  //true 注意，\r\n\r\n     我们这里并不用str1.equals(str2)；的方式，因为这将比较两个字符串的值是否相等。==号，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。 结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。\r\n\r\n4(6)String str1 = \"abc\";\r\n\r\n      String str2 = \"abc\";\r\n\r\n       str1 = \"bcd\";\r\n\r\n       System.out.println(str1 + \",\" + str2);  //bcd, abc      \r\n\r\n       System.out.println(str1==str2);  //false 这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为\"bcd\"时，JVM发现在 常量池中没有存放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。 事 实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这 个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。\r\n\r\n 4(7)\r\n\r\n     String str1 = \"abc\";\r\n\r\n     String str2 = \"abc\";\r\n\r\n               str1 = \"bcd\";      \r\n\r\n     String str3 = str1;      \r\n\r\n     System.out.println(str3);  //bcd      \r\n\r\n     String str4 = \"bcd\";    \r\n\r\n     System.out.println(str1 == str4);  //true str3 这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向 因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。\r\n\r\n 4(8)\r\n\r\n   我们再接着看以下的代码。  \r\n\r\n  String str1 = new String(\"abc\");\r\n\r\n  String str2 = \"abc\";\r\n\r\n  System.out.println(str1==str2);  //false 创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。   String str1 = \"abc\";   String str2 = new String(\"abc\");   System.out.println(str1==str2);  //false 创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。 以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。\r\n\r\n5. 数据类型包装类的值不可修改。不仅仅是String类的值不可修改，所有的数据类型包装类都不能更改其内部的值。\r\n\r\n6. 结论与建议：\r\n\r\n  (1) 我们在使用诸如String str = \"abc\"；的格式定义类时，总是想当然地认为，我们创建了String类的对象str。担心陷阱！对象可能并没有被创建！唯一可以肯定的是，指向 String类的引用被创建了。至于这个引用到底是否指向了一个新的对象，必须根据上下文来考虑，除非你通过new()方法来显要地创建一个新的对象。因 此，更为准确的说法是，我们创建了一个指向String类的对象的引用变量str，这个对象引用变量指向了某个值为\"abc\"的String类。清醒地认 识到这一点对排除程序中难以发现的bug是很有帮助的。\r\n\r\n(2)使用String str = \"abc\"；的方式，可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(\"abc\")；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。这个思想应该是 享元模式的思想，但JDK的内部在这里实现是否应用了这个模式，不得而知。\r\n\r\n(3)当比较包装类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==。\r\n\r\n(4)由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率 ');
INSERT INTO `t_article` VALUES ('3', 'JAVA字符串格式化-String.format()的使用', '2', '1', null, '2017-08-19 19:27:22', '# JAVA字符串格式化-String.format()的使用\r\n\r\n## 常规类型的格式化\r\n\r\nString类的format()方法用于创建格式化的字符串以及连接多个字符串对象。熟悉C语言的同学应该记得C语言的sprintf()方法，两者有类似之处。format()方法有两种重载形式。  \r\n\r\nformat(String format, Object... args) 新字符串使用本地语言环境，制定字符串格式和参数生成格式化的新字符串。\r\nformat(Locale locale, String format, Object... args) 使用指定的语言环境，制定字符串格式和参数生成格式化的字符串。\r\n\r\n### 转换符\r\n\r\n显示不同转换符实现不同数据类型到字符串的转换，如图所示。\r\n\r\n|转 换 符|说 明| 示 例 |\r\n| :--- |:---|:---|\r\n| %s | 字符串类型 | \"name\" |\r\n| %c | 字符类型 | \'m\' |\r\n| %b | 布尔类型 | true |\r\n| %d | 整数类型（十进制） | 99 |\r\n| %x | 整数类型（十六进制） | FF |\r\n| %o | 整数类型（八进制） | 77 |\r\n| %f | 浮点类型 | 99.99 |\r\n| %a | 十六进制浮点类型 | FF.35AE |\r\n| %e | 指数类型 | 9.38e+5 |\r\n| %g | 通用浮点类型（f和e类型中较短的） |  |\r\n| %h | 散列码 |   |\r\n| %% | 百分比类型 | % |\r\n| %n | 换行符 |   |\r\n|%tx|日期与时间类型（x代表不同的日期与时间转换符|  |\r\n\r\n\r\n----------\r\n 测试用例\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n		System.out.printf(\"%s %n\", \"HelloWorld!\");\r\n		System.out.printf(\"字母%c %n\", \'A\');\r\n		System.out.printf(\"3>7的结果是：%b %n\", 3 > 7);\r\n		System.out.printf(\"100的一半是：%d %n\", 100 / 2);\r\n		System.out.printf(\"100的16进制数是：%x %n\", 100);\r\n		System.out.printf(\"100的8进制数是：%o %n\", 100);\r\n		System.out.printf(\"50元的书打8.5折扣是：%f 元%n\", 50 * 0.85);\r\n		System.out.printf(\"上面价格的16进制数是：%a %n\", 50 * 0.85);\r\n		System.out.printf(\"上面价格的指数表示：%e %n\", 50 * 0.85);\r\n		System.out.printf(\"上面价格的指数和浮点数结果的长度较短的是：%g %n\", 50 * 0.85);\r\n		System.out.printf(\"上面的折扣是%d%% %n\", 85);\r\n		System.out.printf(\"字母A的散列码是：%h %n\", \'A\');\r\n	}\r\n```\r\n\r\n输出结果\r\n\r\n```\r\nHelloWorld! \r\n字母A \r\n3>7的结果是：false \r\n100的一半是：50 \r\n100的16进制数是：64 \r\n100的8进制数是：144 \r\n50元的书打8.5折扣是：42.500000 元\r\n上面价格的16进制数是：0x1.54p5 \r\n上面价格的指数表示：4.250000e+01 \r\n上面价格的指数和浮点数结果的长度较短的是：42.5000 \r\n上面的折扣是85% \r\n字母A的散列码是：41 \r\n```\r\n----------\r\n\r\n\r\n### 搭配转换符的标志\r\n\r\n| 标 志 | 说 明 | 示 例 | 结 果|\r\n| :--- | :--- | :--- | :--- | :--- |\r\n| + | 为正数或者负数添加符号 | (\"%+d\",15) | +15 |\r\n| − | 左对齐 | (\"%-5d\",15) |`15　　`|\r\n| 0 | 数字前面补0 | (\"%04d\", 99) | 0099 |\r\n| 空格 | 在整数之前添加指定数量的空格 | (\"% 4d\", 99) | `　　99` |\r\n| , | 以“,”对数字分组 | (\"%,f\", 9999.99) | 9,999.990000 |\r\n| ( | 使用括号包含负数 | (\"%(f\", -99.99) | (99.990000) |\r\n| # | 16进制或8进制则添加0x或0 | (\"%#x\", 99)| 0x63 |\r\n| < | 格式化前一个转换符所描述的参数 | (\"%f和%<3.2f\", 99.45) | 99.450000和99.45 |\r\n\r\n\r\n----------\r\n\r\n测试用例\r\n```java\r\n	public static void main(String[] args) {\r\n		// 数字显示正负号\r\n		System.out.printf(\"显示正负数的符号：%+d与%d%n\", 99, -99);\r\n		// 数字前补特定个数的0\r\n		System.out.printf(\"数字前补零：%04d%n\", 7);\r\n		// 空格的使用\r\n		System.out.printf(\"Tab键的效果是：% 8d%n\", 7);\r\n		// 使用,给数字分节，国际数字单位制每3位数字为一组(节)\r\n		System.out.printf(\"整数分组的效果是：%,d%n\", 9989997);\r\n		// 为16进制数加上0x\r\n		System.out.printf(\"%#x\", 255);\r\n		// 小数点后显示的位数\r\n		System.out.printf(\"一本书的价格是：%.5f元%n\", 49.8);\r\n	}\r\n```\r\n\r\n输出结果\r\n```\r\n显示正负数的符号：+99与-99\r\n数字前补零：0007\r\nTab键的效果是：       7\r\n整数分组的效果是：9,989,997\r\n0xff一本书的价格是：49.80000元\r\n```\r\n\r\n----------\r\n\r\n\r\n## 日期和时间字符串格式化\r\n\r\n在程序界面中经常需要显示时间和日期，但是其显示的格式经常不尽人意，需要编写大量的代码经过各种算法才得到理想的日期与时间格式。字符串格式中还有%tx转换符没有详细介绍，它是专门用来格式化日期和时 间的。%tx转换符中的x代表另外的处理日期和时间格式的转换符，它们的组合能够将日期和时间格式化成多种格式。\r\n\r\n### 日期格式的转换符\r\n\r\n定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如图所示。\r\n\r\n|转 换 符|说 明| 示 例 |\r\n| :--- |:---|:---|\r\n| %ta | 星期几简称 | Mon、星期一 |\r\n| %tA | 星期几全称 | Monday、星期一 |\r\n| %tb | 月份简称 | Mar(英文)、三月(中文)  |\r\n| %tB | 月份全称 | March |\r\n| %tc | 包括全部日期和时间信息 | 星期五 三月 03 23:45:54 CST 2017 |\r\n| %tC | 年的前两位 | 20 |\r\n| %td | 一个月中的第几天（01-31） | 04 |\r\n| %te | 一个月中的某一天（1-31） | 4 |\r\n| %ty | 年的后两位 | 17 |\r\n| %tY | 四位年份 | 2017 |\r\n| %tj | 一年中的第几天（001-366） | 085 |\r\n| %tm | 月份 | 03 |\r\n\r\n\r\n\r\n----------\r\n\r\n测试用例\r\n```java\r\n	public static void main(String[] args) {\r\n		Date date = new Date();\r\n		// e的使用，日（一位不补零）\r\n		System.out.printf(\"日（前面不补0）：%te%n\", date);\r\n		// b的使用，月份简称\r\n		String str = String.format(Locale.US, \"英文月份简称：%tb\", date);\r\n		System.out.println(str);\r\n		System.out.printf(\"本地月份简称：%tb%n\", date);\r\n		// B的使用，月份全称\r\n		str = String.format(Locale.US, \"英文月份全称：%tB\", date);\r\n		System.out.println(str);\r\n		System.out.printf(\"本地月份全称：%tB%n\", date);\r\n		// a的使用，星期简称\r\n		str = String.format(Locale.US, \"英文星期的简称：%ta\", date);\r\n		System.out.println(str);\r\n		// A的使用，星期全称\r\n		System.out.printf(\"本地星期的简称：%tA%n\", date);\r\n		// C的使用，年前两位\r\n		System.out.printf(\"年的前两位数字（不足两位前面补0）：%tC%n\", date);\r\n		// y的使用，年后两位\r\n		System.out.printf(\"年的后两位数字（不足两位前面补0）：%ty%n\", date);\r\n		// j的使用，一年的天数\r\n		System.out.printf(\"一年中的天数（即年的第几天）：%tj%n\", date);\r\n		// m的使用，月份\r\n		System.out.printf(\"两位数字的月份（不足两位前面补0）：%tm%n\", date);\r\n		// d的使用，日（二位，不够补零）\r\n		System.out.printf(\"两位数字的日（不足两位前面补0）：%td%n\", date);\r\n	}\r\n```\r\n\r\n输出结果\r\n```\r\n日（前面不补0）：4\r\n英文月份简称：Mar\r\n本地月份简称：三月\r\n英文月份全称：March\r\n本地月份全称：三月\r\n英文星期的简称：Sat\r\n本地星期的简称：星期六\r\n年的前两位数字（不足两位前面补0）：20\r\n年的后两位数字（不足两位前面补0）：17\r\n一年中的天数（即年的第几天）：063\r\n两位数字的月份（不足两位前面补0）：03\r\n两位数字的日（不足两位前面补0）：04\r\n\r\n```\r\n\r\n----------\r\n\r\n### 时间格式的转换符\r\n\r\n 时间格式的转换符可以将时间格式化成时、分、秒甚至时毫秒等单位。格式化时间字符串的转换符如图所示。\r\n\r\n|转 换 符|说 明| 示 例 |\r\n| :--- |:---|:---|\r\n| %tH | 2位数字的24小时制的小时（00-23） | 14 |\r\n| %tI | 2位数字的12小时制的小时（01-12） | 05 |\r\n| %tk | 2位数字的24小时制的小时（0-23） | 5 |\r\n| %ti | 2位数字的12小时制的小时（1-12） | 5 |\r\n| %tM | 2位数字的分钟（00-59） | 05 |\r\n| %tS | 2位数字的秒（00-60） | 12 |\r\n| %tL | 3位数字的毫秒数（000-999） | 920 |\r\n| %tN | 9位数字的毫秒数（000000000-999999999） | 062000000 |\r\n| %tp | 小写字母的上午或下午标记 | 下午（中文）、pm（英文） |\r\n| %tz | 相对于GMT RFC 82 格式的数字时区偏移量 | +0800  |\r\n| %tZ | 时区缩写形式的字符串 | CST |\r\n| %ts | 1970-01-01 00：00：00至现在经过的秒数 | 1488558186|\r\n| %tQ | 1970-01-01 00：00：00至现在经过的毫秒数 | 1488558186061 |\r\n\r\n\r\n----------\r\n\r\n测试用例\r\n```java\r\n	public static void main(String[] args) {\r\n		Date date = new Date();\r\n		// H的使用\r\n		System.out.printf(\"2位数字24时制的小时（不足2位前面补0）:%tH%n\", date);\r\n		// I的使用\r\n		System.out.printf(\"2位数字12时制的小时（不足2位前面补0）:%tI%n\", date);\r\n		// k的使用\r\n		System.out.printf(\"2位数字24时制的小时（前面不补0）:%tk%n\", date);\r\n		// l的使用\r\n		System.out.printf(\"2位数字12时制的小时（前面不补0）:%tl%n\", date);\r\n		// M的使用\r\n		System.out.printf(\"2位数字的分钟（不足2位前面补0）:%tM%n\", date);\r\n		// S的使用\r\n		System.out.printf(\"2位数字的秒（不足2位前面补0）:%tS%n\", date);\r\n		// L的使用\r\n		System.out.printf(\"3位数字的毫秒（不足3位前面补0）:%tL%n\", date);\r\n		// N的使用\r\n		System.out.printf(\"9位数字的毫秒数（不足9位前面补0）:%tN%n\", date);\r\n		// p的使用\r\n		String str = String.format(Locale.US, \"小写字母的上午或下午标记(英)：%tp\", date);\r\n		System.out.println(str);\r\n		System.out.printf(\"小写字母的上午或下午标记（中）：%tp%n\", date);\r\n		// z的使用\r\n		System.out.printf(\"相对于GMT的RFC822时区的偏移量:%tz%n\", date);\r\n		// Z的使用\r\n		System.out.printf(\"时区缩写字符串:%tZ%n\", date);\r\n		// s的使用\r\n		System.out.printf(\"1970-1-1 00:00:00 到现在所经过的秒数：%ts%n\", date);\r\n		// Q的使用\r\n		System.out.printf(\"1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ%n\", date);\r\n	}\r\n```\r\n\r\n输出结果\r\n```\r\n2位数字24时制的小时（不足2位前面补0）:00\r\n2位数字12时制的小时（不足2位前面补0）:12\r\n2位数字24时制的小时（前面不补0）:0\r\n2位数字12时制的小时（前面不补0）:12\r\n2位数字的分钟（不足2位前面补0）:23\r\n2位数字的秒（不足2位前面补0）:06\r\n3位数字的毫秒（不足3位前面补0）:061\r\n9位数字的毫秒数（不足9位前面补0）:061000000\r\n小写字母的上午或下午标记(英)：am\r\n小写字母的上午或下午标记（中）：上午\r\n相对于GMT的RFC822时区的偏移量:+0800\r\n时区缩写字符串:CST\r\n1970-1-1 00:00:00 到现在所经过的秒数：1488558186\r\n1970-1-1 00:00:00 到现在所经过的毫秒数：1488558186061\r\n\r\n```\r\n\r\n----------\r\n\r\n### 日期和时间组合的格式\r\n\r\n常见日期和时间组合的格式，如图所示。\r\n\r\n|转 换 符|说 明| 示 例 |\r\n| :--- |:---|:---|\r\n| %tc | 包括全部日期和时间信息 | 星期五 三月 03 23:45:54 CST 2017 |\r\n| %tF | “年-月-日”格式 | 2017-03-03 |\r\n| %tD | “月/日/年”格式 | 03/03/17 |\r\n| %tr | “HH:MM:SS PM”格式（12时制） | 11:45:54 下午午 |\r\n| %tT | “HH:MM:SS”格式（24时制） | 23:45:54 |\r\n| %tR | “HH:MM”格式（24时制） | 23:45 |\r\n\r\n\r\n----------\r\n\r\n测试用例\r\n\r\n```java\r\n	public static void main(String[] args) {\r\n		Date date = new Date();\r\n		// c的使用\r\n		System.out.printf(\"全部日期和时间信息：%tc%n\", date);\r\n		// F的使用\r\n		System.out.printf(\"年-月-日格式：%tF%n\", date);\r\n		// D的使用\r\n		System.out.printf(\"月/日/年格式：%tD%n\", date);\r\n		// r的使用\r\n		System.out.printf(\"HH:MM:SS PM格式（12时制）：%tr%n\", date);\r\n		// T的使用\r\n		System.out.printf(\"HH:MM:SS格式（24时制）：%tT%n\", date);\r\n		// R的使用\r\n		System.out.printf(\"HH:MM格式（24时制）：%tR\", date);\r\n	}\r\n```\r\n\r\n输出结果\r\n\r\n```\r\n全部日期和时间信息：星期五 三月 03 23:45:54 CST 2017\r\n年-月-日格式：2017-03-03\r\n月/日/年格式：03/03/17\r\nHH:MM:SS PM格式（12时制）：11:45:54 下午\r\nHH:MM:SS格式（24时制）：23:45:54\r\nHH:MM格式（24时制）：23:45\r\n```\r\n\r\n\r\n----------');
INSERT INTO `t_article` VALUES ('4', 'Apache2 VirtualHost的配置方法', '2', '1', null, '2017-08-19 19:28:09', '## apache2.conf的配置\r\n开发时经常需要配置多个站点，并经常进行切换。\r\n以前的做法是在httpd.conf里include所有的配置文件，不需要的时候进行注释，例如：\r\n```\r\ninclude conf/site.conf\r\n#include conf/default.conf\r\ninclude conf/spider.conf\r\n```\r\n这样需要先定位到`httpd.conf`的目录，然后使用编辑器打开、修改、然后保存，比较麻烦。\r\n现在可以在`apache2.conf`里include所有的配置文件。  \r\n![apache2.conf](http://img.blog.csdn.net/20161226202151823)\r\n\r\n##  a2ensite和a2dissite的使用\r\n\r\n另外Apache还提供了方便的工具来管理配置文件，就是`a2ensite`和`a2dissite`，它们都在`apache2-common`包里。\r\n`/etc/apache2/sites-available` 目录下存放可用的VirtualHost配置文件  \r\n ![sites-available目录](http://img.blog.csdn.net/20161226202246480)\r\n`/etc/apache2/sites-enable`  目录下存放已经生效的VirtualHost配置文件的符号链接(Symbolic Link)，也就是常说的快捷方式啦，该链接指向sites-available下的同名文件。\r\n![sites-enable目录](http://img.blog.csdn.net/20161226202338261)  \r\n使用命令`a2ensite`可以将`sites-available`目录下的配置文件生效，并且生效后会自动在`sites-enable`目录下创建同名链接。\r\n使用命令`a2dissite`可以将`sites-enable`目录下的配置文件链接失效并自动删除该链接。\r\n通过`a2dissite`和`a2ensite`，我们可以快速激活/屏蔽站点，加快开发和部署效率。\r\n\r\n##  实例：配置基于域名的虚拟主机方法\r\n\r\n 1. `sites-available`目录下新建VirtualHost配置文件  \r\n![新建VirtualHost配置文件](http://img.blog.csdn.net/20161226202525577)\r\n 2. 使用`a2dissite`命令来使原有的VirtualHost配置失效  \r\n![使用a2dissite命令](http://img.blog.csdn.net/20161226202553405)\r\n 3. 使用`a2ensite`命令来使新的VirtualHost配置生效  \r\n![使用a2ensite命令](http://img.blog.csdn.net/20161226202733263)\r\n 4. 重启apache2服务  \r\n![重启apache2服务](http://img.blog.csdn.net/20161226202706403)');
INSERT INTO `t_article` VALUES ('5', '当你访问一个网址的时候会发生什么', '2', '5', null, '2017-08-19 19:29:05', '作为一个软件开发者，你一定会对网络应用如何工作的问题有一个高层次化认知，这些技术包括：浏览器，HTTP，HTML，web服务器，请求处理等等。\r\n\r\n在这篇文章里，我们将深入了解当你访问一个网址的时候事件发生的顺序。\r\n\r\n### 1. 在浏览器里输入网址\r\n\r\n![url-facebool](http://img.blog.csdn.net/20161014180343347)\r\n\r\n### 2. 浏览器将查找域名对应IP地址\r\n\r\n![link-facebook](http://img.blog.csdn.net/20161014180424863)\r\n\r\n导航的第一步是通过访问的域名找出其IP地址。DNS查找过程如下：\r\n\r\n- **浏览器缓存** - 浏览器会缓存DNS记录一段时间。有趣的是，操作系统没有告诉浏览器储存DNS记录的时间，这样不同浏览器会储存个自固定的一个时间（2分钟到30分钟不等）。\r\n- **系统缓存** - 如果在浏览器缓存里没有找到需要的记录，浏览器会做一个系统调用（windows里是gethostbyname）。这样便可获得系统缓存中的记录。\r\n- **路由器缓存** - 接着，前面的查询请求发送给路由器，它一般会有自己的DNS缓存。\r\n- **ISP DNS 缓存** - 接下来要check的就是ISP（互联网服务提供商）的DNS缓存服务器。在这一般都能找到相应的缓存记录。\r\n- **递归搜索** - 你的ISP的DNS服务器从跟域名服务器开始进行递归搜索，从.com顶级域名服务器到Facebook的域名服务器。一般DNS服务器的缓存中会有.com域名服务器中的域名，所以到顶级服务器的匹配过程不是那么必要了。\r\n\r\nDNS递归查找如下图所示：\r\n\r\n![dns-search](http://img.blog.csdn.net/20161014180433124)\r\n\r\nDNS有一点令人担忧，尤其是访问量过大的时候。这就是像 wikipedia.org 或者 facebook.com 这样的整个域名看上去只是对应一个单独的IP地址。还好，有几种方法可以消除这个瓶颈：\r\n\r\n- [**循环 DNS**](http://baike.baidu.com/view/1527368.html) - 是DNS查找时返回多个IP时的解决方案。举例来说，Facebook.com 实际上就对应了四个IP地址。\r\n- [**负载均衡器**](http://baike.baidu.com/view/486970.html) - 是以一个特定IP地址进行侦听并将网络请求转发到集群服务器上的硬件设备。 一些大型的站点一般都会使用这种昂贵的高性能负载平衡器。\r\n- [**CDN**](http://baike.baidu.com/item/CDN) - 全称是Content Delivery Network，即内容分发网络。根据用户所处的地理位置，通过把域名映射到多个不同的IP地址提高可扩展性。这样不同的服务器不能够更新同步状态，但映射静态内容的话非常好。\r\n- [**Anycast**](http://baike.baidu.com/item/Anycast) - 是一个IP地址映射多个物理主机的路由技术。 美中不足，Anycast与TCP协议适应的不是很好，所以很少应用在那些方案中。大多数DNS服务器使用Anycast来获得高效低延迟的DNS查找。\r\n\r\n### 3. 浏览器给web服务器发送一个HTTP请求\r\n\r\n![get](http://img.blog.csdn.net/20161014180446703)\r\n\r\n因为像Facebook主页这样的动态页面，打开后在浏览器缓存中很快甚至马上就会过期，毫无疑问他们不能从中读取。  \r\n所以，浏览器将把以下请求发送到Facebook所在的服务器：\r\n\r\n```\r\n GET http://facebook.com/ HTTP/1.1\r\n Accept: application/x-ms-application, image/jpeg, application/xaml+xml, [...]\r\n User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; [...]\r\n Accept-Encoding: gzip, deflate\r\n Connection: Keep-Alive\r\n Host: facebook.com\r\n Cookie: datr=1265876274-[...]; locale=en_US; lsd=WW[...]; c_user=2101[...]\r\n```\r\n\r\nGET 这个请求定义了要读取的 **URL**： “http://facebook.com/”。 浏览器自身定义 ( **User-Agent** 头)， 和它希望接受什么类型的相应 ( **Accept-Encoding** 头)， **Connection** 头请求服务器不要关闭TCP连接。\r\n\r\n请求中也包含浏览器存储的该域名的**cookies**。可能你已经知道，在不同页面请求当中，cookies是与跟踪一个网站状态相匹配的键值。这样cookies会存储登录用户名，服务器分配的密码和一些用户设置等。Cookies会以文本文档形式存储在客户机里，每次请求时发送给服务器。\r\n\r\n用来看原始HTTP请求及其相应的工具很多。比如Wireshark、fiddler，当然也有像FireBug这样其他的工具。这些软件在网站优化时会帮上很大忙。\r\n\r\n除了获取请求，还有一种是发送请求（**Post**），它常在提交表单用到。\r\n发送请求通过URL传递其参数(e.g.: http://www.topblog.top/login.jsp?userId=1)。发送请求在请求正文头之后发送其参数。\r\n\r\n像“http://facebook.com/”中的斜杠是至关重要的。这种情况下，浏览器能安全的添加斜杠。\r\n而像“http: //example.com/folderOrFile”这样的地址，因为浏览器不清楚folderOrFile到底是文件夹还是文件，所以不能自动添加斜杠。**这时，浏览器就不加斜杠直接访问地址，服务器会响应一个重定向，结果造成一次不必要的握手。**\r\n\r\n### 4. facebook服务的永久重定向响应\r\n\r\n![重定向](http://img.blog.csdn.net/20161014180455613)\r\n\r\n以下所示为Facebook服务器发回给浏览器的响应：\r\n\r\n```\r\n HTTP/1.1 301 Moved Permanently\r\n Cache-Control: private, no-store, no-cache, must-revalidate, post-check=0,\r\n pre-check=0\r\n Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n Location: http://www.facebook.com/\r\n P3P: CP=\"DSP LAW\"\r\n Pragma: no-cache\r\n Set-Cookie: made_write_conn=deleted; expires=Thu, 12-Feb-2009 05:09:50 GMT;\r\n path=/; domain=.facebook.com; httponly\r\n Content-Type: text/html; charset=utf-8\r\n X-Cnection: close\r\n Date: Fri, 12 Feb 2010 05:09:51 GMT\r\n Content-Length: 0\r\n```\r\n\r\n服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问 “http://www.facebook.com/” 而非 “http://facebook.com/” 。\r\n\r\n为什么服务器一定要重定向而不是直接发会用户想看的网页内容呢？这个问题有好多有意思的答案。\r\n\r\n其中一个原因跟**搜索引擎排名**有关。你看，如果一个页面有两个地址，就像 http://www.topblog.top/ 和 http://topblog.top/ ，搜索引擎会认为它们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带 www 的和不带 www 的地址归到同一个网站排名下。\r\n\r\n还有一个是用不同的地址会造成**缓存友好性**变差。当一个页面有好几个名字时，它可能会在浏览器缓存里出现好几次。\r\n\r\n### 5. 浏览器跟踪重定向地址\r\n\r\n![get](http://img.blog.csdn.net/20161014180446703)\r\n\r\n现在，浏览器知道了“http://www.facebook.com/”才是要访问的正确地址，所以它会发送另一个获取请求：\r\n\r\n```\r\n GET http://www.facebook.com/ HTTP/1.1\r\n Accept: application/x-ms-application, image/jpeg, application/xaml+xml, [...]\r\n Accept-Language: en-US\r\n User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; [...]\r\n Accept-Encoding: gzip, deflate\r\n Connection: Keep-Alive\r\n Cookie: lsd=XW[...]; c_user=21[...]; x-referer=[...]\r\n Host: www.facebook.com</pre>\r\n```\r\n\r\n头信息与之前请求中的意义相同,这里就不再进行解释。\r\n\r\n### 6. 服务器“处理”请求\r\n\r\n![处理请求](http://img.blog.csdn.net/20161014180548270)\r\n\r\n服务器接收到获取请求，然后处理并返回一个响应。\r\n\r\n这表面上看起来是一个顺向的任务，但其实这中间发生了很多有意思的东西- 就像作者博客这样简单的网站，何况像facebook那样访问量大的网站呢！\r\n\r\n- **Web 服务器软件** - web服务器软件（像IIS和Apache）接收到HTTP请求，然后确定执行什么请求处理来处理它。请求处理就是一个能够读懂请求并且能生成HTML来进行响应的程序（像ASP.NET,PHP,RUBY...）。  \r\n举个最简单的例子，需求处理可以以映射网站地址结构的文件层次存储。像 http://example.com/folder1/page1.aspx 这个地址会映射 /httpdocs/folder1/page1.aspx 这个文件。web服务器软件可以设置成为地址人工的对应请求处理，这样 page1.aspx 的发布地址就可以是 http://example.com/folder1/page1 。\r\n- **请求处理** - 请求处理阅读请求及它的参数和cookies。它会读取也可能更新一些数据，并讲数据存储在服务器上。然后，需求处理会生成一个HTML响应。\r\n\r\n所有动态网站都面临一个有意思的难点——如何存储数据。小网站一半都会有一个SQL数据库来存储数据，存储大量数据和/或访问量大的网站不得不找一些办法把数据库分配到多台机器上。解决方案 有：sharding （基于主键值讲数据表分散到多个数据库中），复制，利用弱语义一致性的简化数据库。\r\n\r\n委托工作给批处理是一个廉价保持数据更新的技术。举例来讲，Fackbook得及时更新新闻feed，但数据支持下的“你可能认识的人”功能只需要每晚更新 （作者猜测是这样的，改功能如何完善不得而知）。批处理作业更新会导致一些不太重要的数据陈旧，但能使数据更新耕作更快更简洁。\r\n\r\n### 7. 服务器发回一个HTML响应\r\n\r\n![服务器响应-200](http://img.blog.csdn.net/20161014180602489)\r\n\r\n以下为服务器生成并返回的响应：\r\n\r\n```\r\n HTTP/1.1 200 OK\r\n Cache-Control: private, no-store, no-cache, must-revalidate, post-check=0,\r\n pre-check=0\r\n Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n P3P: CP=\"DSP LAW\"\r\n Pragma: no-cache\r\n Content-Encoding: gzip\r\n Content-Type: text/html; charset=utf-8\r\n X-Cnection: close\r\n Transfer-Encoding: chunked\r\n Date: Fri, 12 Feb 2010 09:05:55 GMT\r\n 2b3Tn@[...]\r\n```\r\n\r\n整个响应大小为35kB，其中大部分在整理后以blob类型传输。\r\n\r\n**内容编码头**告诉浏览器整个响应体用gzip算法进行压缩。解压blob块后，你可以看到如下期望的HTML：\r\n\r\n```\r\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" id=\"facebook\" class=\" no_js\">\r\n <head>\r\n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\r\n <meta http-equiv=\"Content-language\" content=\"en\" />\r\n ...\r\n```\r\n\r\n关于压缩，头信息说明了是否缓存这个页面，如果缓存的话如何去做，有什么cookies要去设置（前面这个响应里没有这点）和隐私信息等等。\r\n\r\n请注意报头中把**Content-type**设置为**“text/html”**。报头让浏览器将该响应内容以HTML形式呈现，而不是以文件形式下载它。浏览器会根据报头信息决定如何解释该响应，不过同时也会考虑像URL扩展内容等其他因素。\r\n\r\n### 8. 浏览器开始显示HTML\r\n\r\n在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了：\r\n\r\n![view](http://img.blog.csdn.net/20161014180616080)\r\n\r\n### 9. 浏览器发送获取嵌入在HTML中的对象\r\n\r\n![get](http://img.blog.csdn.net/20161014184802932)\r\n\r\n在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。\r\n\r\n下面是几个我们访问facebook.com时需要重获取的几个URL：\r\n\r\n\r\n- **图片** http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif\r\n- **CSS 式样表** http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css\r\n- **JavaScript 文件** http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js\r\n\r\n这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等...\r\n\r\n但不像动态页面那样，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取。服务器的响应中包含了静态文件保存的期限 信息，所以浏览器知道要把它们缓存多长时间。还有，每个响应都可能包含像版本号一样工作的ETag头（被请求变量的实体值），如果浏览器观察到文件的版本 ETag信息已经存在，就马上停止这个文件的传输。\r\n\r\n试着猜猜看“**fbcdn.net**”在地址中代表什么？聪明的答案是\"Facebook内容分发网络\"。Facebook利用内容分发网络（CDN）分发像图片，CSS表和JavaScript文件这些静态文件。所以，这些文件会在全球很多CDN的数据中心中留下备份。\r\n\r\n静态内容往往代表站点的带宽大小，也能通过CDN轻松的复制。通常网站会使用第三方的CDN。例如，Facebook的静态文件由最大的CDN提供商Akamai来托管。\r\n\r\n举例来讲，当你试着ping static.ak.fbcdn.net的时候，可能会从某个akamai.net服务器上获得响应。有意思的是，当你同样再ping一次的时候，响应的服务器可能就不一样，这说明幕后的负载平衡开始起作用了。\r\n\r\n### 10. 浏览器发送异步（AJAX）请求\r\n\r\n![ajax](http://img.blog.csdn.net/20161014180624114)\r\n\r\n在Web 2.0伟大精神的指引下，页面显示完成后客户端仍与服务器端保持着联系。\r\n\r\n以 Facebook聊天功能为例，它会持续与服务器保持联系来及时更新你那些亮亮灰灰的好友状态。为了更新这些头像亮着的好友状态，在浏览器中执行的 JavaScript代码会给服务器发送异步请求。这个异步请求发送给特定的地址，它是一个按照程式构造的获取或发送请求。还是在Facebook这个例 子中，客户端发送给 http://www.facebook.com/ajax/chat/buddy_list.php 一个发布请求来获取你好友里哪个 在线的状态信息。\r\n\r\n提起这个模式，就必须要讲讲\"AJAX\"-- “异步JavaScript 和 XML”，虽然服务器为什么用XML格式来进行响应也没有个一清二白的原因。再举个例子吧，对于异步请求，Facebook会返回一些JavaScript的代码片段。\r\n\r\n除了其他，fiddler这个工具能够让你看到浏览器发送的异步请求。事实上，你不仅可以被动的做为这些请求的看客，还能主动出击修改和重新发送它们。AJAX请求这么容易被蒙，可着实让那些计分的在线游戏开发者们郁闷的了。（当然，可别那样骗人家~）\r\n\r\nFacebook聊天功能提供了关于AJAX一个有意思的问题案例：把数据从服务器端推送到客户端。因为HTTP是一个请求-响应协议，所以聊天服务器不能把新消息发给客户。取而代之的是客户端不得不隔几秒就轮询下服务器端看自己有没有新消息。\r\n\r\n这些情况发生时长轮询是个减轻服务器负载挺有趣的技术。如果当被轮询时服务器没有新消息，它就不理这个客户端。而当尚未超时的情况下收到了该客户的新消息，服务器就会找到未完成的请求，把新消息做为响应返回给客户端。\r\n\r\n\r\n> 转载自：[http://igoro.com/](http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/)  \r\n> 原文作者： Igor Ostrovsky');
INSERT INTO `t_article` VALUES ('6', '使用JuiceSSH玩转Linux与Windows', '2', '11', null, '2017-08-19 19:29:36', '---\r\nlayout: post\r\ntitle: 使用JuiceSSH玩转Linux与Windows\r\ncategory: JuiceSSH\r\ntags: [JuiceSSH]\r\n---\r\n\r\n## JuiceSSH\r\n\r\n### Linux主机的管理\r\n\r\nwindows平台上我们可以使用XShell，Putty，SecureCRT等SSH终端软件。但是讲到移动端的终端软件， 那就不得不提到 JuiceSSH 了，它是我所使用的ssh安卓手机客户端上最满意的一款，无论从操作上都比 ConnectBot 及 VX ConnectBot 都方便许多。有了它，用手机管理 linux 服务器相当方便，可以作为系统管理员手机必备软件之一。  还能够满足Linux系统学习的需要，因为你可以在任何时间地点使用，只要你有一部能够上网的安卓手机即可。\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160926142344794)\r\n\r\n特点：\r\n\r\n - 全彩色终端/SSH客户端\r\n - 弹出式键盘包含常用的字符\r\n - 可使用音量键快速调节字体大小\r\n - 支持外接键盘\r\n - 支持官方Mosh(一种在手机上的shell，适合网络不稳定的情况下使用，官网地址：http://mosh.mit.edu/)\r\n - Telnet支持\r\n - 支持安卓本地终端\r\n - 点击网址链接可直接调用浏览器打开\r\n - 会话中可复制、粘贴\r\n - 可保存人机命令交互信息到文件，并可分享到Dropbox或者Evernote、邮件及SD卡上(这功能方便，我很喜欢，貌似别的没有)\r\n - 支持UTF-8编码\r\n - 可以通过组分类管理你的SSh连接\r\n - 后端可以同时开启多个会话\r\n - 通过一键点击实现无缝连接其他SSH会话\r\n - 在打开App时能够快速与常用的SSH链接建立会话\r\n - 支持密码和OpenSSH私钥认证\r\n - 支持SSH 秘钥代理转发\r\n - 支持谷歌之类的双认证\r\n - 更新密码或秘钥等后，会话开启就直接使用新的密码秘钥连接\r\n - zlib要锁改善SSH会话在高延迟下的情况(这应该是Mosh更好)\r\n\r\n具体Linux的操作我在这里就不详细说明了。\r\n\r\n## Windows主机的管理\r\n\r\nWindows提供了一些远程管理功能，比如强大的 [PowerShell](http://www.powershellserver.com/)，虽然只能允许同时连接一个人，毕竟windows只支持单用户登录。具体的功能配置以及使用请参考官方文档：[http://www.powershellserver.com/support/articles/getting-started/](http://www.powershellserver.com/support/articles/getting-started/)\r\n\r\nTips：由于天朝防火墙的原因，国外一些网站无法访问。如果你没有翻墙技能，你可以到本站资源分享专区获取对应的下载资源。或者加入我们内部群获取最新的SS翻墙帐号，免费提供~仅供学习使用！\r\n\r\n### windows PowerShell服务的配置\r\n好了，我们来下载一个： \r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160926151934540)\r\n\r\n配置如下图，最后那个File Based Public Key就是你的客户端生成的那个公钥（我这里使用的是Xshell生成的一对密钥,你可以从不同渠道获得一对密钥。） \r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160926152838802)\r\n\r\n我们改一下编码方式，改成简体中文就好，这样当我们使用JuiceSSH终端连接windows时就显示中文了 \r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160926153142515)\r\n\r\n### 移动端JuiceSSH的配置\r\n\r\n接下配置JuiceSSH，填写Windows 外网IP地址、端口（默认22）以及认证（这里认证用户名可随意填写，私钥一定要选择与刚才公钥配对的密钥，否则无法认证！） \r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160926154643364)\r\n\r\n注意：如果你使用的是内网ip （即使用了路由器），如果仅仅设置内网IP地址，比如：192.168.1.100。\r\n那么只有当你的移动端也在该路由器管理下才能和Windows连接。\r\n但是可能很多小伙伴可能并不满足只在局域网环境下管理你的windows主机，而是即使在不同的网络环境（比如移动端使用3G/4G网络）就能远程操作你的windows主机，那么你就需要在路由器中配置相应的转发规则了。\r\n具体配置如下：\r\n进入路由器管理界面，找到转发规则中的虚拟服务器选项。填写虚拟服务器配置： \r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20161003220516486)\r\n\r\n配置完毕后你就可以在JuiceSSH的主机地址一栏中填写你的外网IP地址了，如果你不知道你的外网IP，可以在路由器的WAN口状态中查看。或者直接百度搜索‘ip’，即可得到你的外网IP。\r\n\r\n恭喜，到这一步你就可以移动端远程登录上你的windows主机了： \r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160926154810608)\r\n\r\n你可以使用命令行远程操作你的windows主机：\r\n比如关机、注销、重启，查看文件目录，查看、终止系统进程，打开QQ，打开音乐播放器等等常见操作都可以使用命令行的形式进行远程操作。\r\n\r\n这里演示如何远程操作登录QQ以及打开音乐播放器：\r\n首先配置系统环境变量：在path中添加你的QQ执行文件`QQ.exe` 的目录位置，比如我的在： `D:\\QQ\\Bin`。然后是网易云音乐的执行文件`cloudmusic.exe` 在目录`D:\\CloudMusic` 下。Path中只要添加这样两条记录即可：`D:\\QQ\\Bin` 和`D:\\CloudMusic`\r\n\r\n然后你只要在命令行中输入`qq`，你就会惊奇的发现windows就会打开QQ登录程序，如果你设置了自动登录，那么你就实现了移动端远程操作登陆QQ。 \r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160926160758419)![这里写图片描述](http://img.blog.csdn.net/20160926161123749)\r\n\r\n同样如果输入`cloudmusic`，那么电脑就会打开网易云音乐，如果你设置了打开就自动播放，那么那么你就实现了移动端远程操作播放音乐。\r\n\r\n最后，你躺在床上在手机上输入`shutdown /p`,你的电脑就自动关机了，是不是很方便呢。\r\n更多功能自己脑洞吧~~ 比如别人在用我的电脑打游戏，我可以躲在角落在手机上输入`ps` 查看游戏进程ID，一个`kill` 命令结束掉游戏进程。然后`./tupian.jpg` 打开一张图片告诉他，这个游戏只能玩10分钟！！！相信你的小伙伴绝对是一脸懵逼，Ahhhhhh。\r\n\r\n文章来自:  [拓扑部落（topblog.top）>>](http://www.topblog.top) [使用JuiceSSH玩转Linux与Windows](http://www.topblog.top/?p=507)\r\n');
INSERT INTO `t_article` VALUES ('7', '打字-程序员的必修课', '2', '1', null, '2017-08-19 19:30:02', '---\r\nlayout: post\r\ntitle: 打字-程序员的必修课\r\ncategory: Type\r\ntags: [Type]\r\n---\r\n\r\n> **成为一个优秀的程序员，打字速度虽然不是必要条件。但是一个打字快的程序员，必然会享受自己的打字速度，速度快听着啪啪声实在是爽的不行。**\r\n\r\n## Ratatype\r\n\r\n[Ratatype](http://www.ratatype.com/) 是一个在线的打字教程网站，能够帮助你提高键盘输入速度。\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160908225032829)\r\n\r\n### TYPING TUTOR\r\n\r\n在TYPING TUTOR版块中逐步练习你的指法。每天练习几节内容。学习完TYPING TUTOR内容相信你的盲打速度绝对会上升一个层次。\r\n\r\n### TYPING TEST\r\n\r\n在TYPING TEST板块中可以测试你的打字速度，不仅如此，你还能获得一张精美的证书。\r\n![这里写图片描述](http://img.blog.csdn.net/20160908225125252)\r\n----\r\n\r\n## Join our group \r\n\r\n点击以下链接即可加入我们的小组\r\n\r\n* 洗脚水刚刚好：[The feet of water just fine](www.ratatype.com/groups/6832870)\r\n* 成绩排名，好友PK，一起学习更有动力！！\r\n\r\n\r\n## Game \r\n\r\n最后再分享一个打字游戏，没错~~~就是金山打字通的生死时速。如果你不想下载完整版的金山打字通，只想玩警察抓小偷的游戏，那么该款软件是你的不二选择。\r\n\r\n百度云网盘：**[生死时速 <-- 戳这里下载](http://pan.baidu.com/s/1qYu6iw0)**\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160909131041458)\r\n\r\n文章来自:  [拓扑部落（topblog.top）>>](http://www.topblog.top)  [打字-程序员的必修课](http://www.topblog.top/?p=268)\r\n');
INSERT INTO `t_article` VALUES ('8', '在VPS上搭建shadowsocks来科学上网', '2', '11', null, '2017-08-19 19:30:28', '---\r\nlayout: post\r\ntitle: 在VPS上搭建shadowsocks来科学上网\r\ncategory: shadowsocks\r\ntags: [shadowsocks]\r\n---\r\n\r\n之前一直在使用免费的ss，但是访问外网的速度实在是不可恭维，索性决定自己搭建VPS来翻墙。本来准备在[搬瓦工](https://bandwagonhost.com/)购买，不过最低配置也要$19.9/Y。  \r\n\r\n后来意外发现 GitHub Education 有面向学生的福利，一旦成功申请到Github Student pack，就可以获得$50，加上充值的$5和小伙伴给的邀请链接$10,此时账户一共有$65，对于最低配置的VPS $5一个月，可以使用一年啊！！直到毕业之前都一直有Promo Code赠送，那就远远不止免费一年了。\r\n\r\n推荐有能力，爱折腾，有科学上网需要的小伙伴食用此教程。\r\n这是得到Student Developer Pack时Git发来的邮件的部分内容：\r\n\r\n> Spread the word: we love giving educational discounts to students, teachers, administrators, and researchers! Please send them to:  \r\n        https://education.github.com \r\n\r\n真是暖心啊~~~业界良心！！！\r\n具体过程参考以下内容：\r\n\r\n## Student Developer Pack\r\n\r\n如果你是学生的话，可以前往 [GitHub](https://education.github.com/)，如果你没有GitHub帐号，先注册GitHub，注册完成后点击 I am a student 填写学生验证信息， Verify academic status 一栏选择 \r\nI don\'t have a school-issued email （第一次我使用学校的 edu 邮箱提交申请当天就被拒绝了，貌似国内edu邮箱没有公信力），然后上传你的学生证照片或者能证明你是学生即可。剩下的就是漫长的等待了，不过这点等待还是很值得的（本人等了接近2天终于收到确认信件）~~~\r\n\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160816164348813)\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160816164637677)\r\n\r\n##  Digital Ocean\r\n\r\n### 注册DO帐号\r\n\r\n首先注册Digital Ocean账号。可以点击我的[邀请链接](https://m.do.co/c/6d3c33c4b39e)注册，激活后就会收到$10的奖励，但是仅仅这样还是无法在Digital Ocean上创建虚拟主机。你需要绑定信用卡或者使用PayPal添加银行卡，作为国内用户建议不要使用国内信用卡，有说会不成功，导致账号直接废了。通过paypal充值的方法验证账户的好处是如果有纠纷可以通过paypal纠纷申请退款，并且paypal资金安全性要好于信用卡绑定。PayPal需要支付$5才能完成注册流程。我是在paypal账号上绑定了一张银联的卡来付款的，$5按汇率大概￥33多一点吧。\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160816161413413)\r\n\r\n* 具体方法参考[Digitalocean VPS注册和使用详细中文教程](http://www.hi8688.com/695.html) 的前四个步骤就好。\r\n\r\n* 如果你已经获得了了第一步的Student Developer Pack，那么可以在注册成功后在Settings->Billing下找到Promo Code，输入你在Student Developer Pack获得的学生优惠码，价值50刀，这对于屌丝学生来说可是笔不小的数目。\r\n\r\n### 创建VPS\r\n\r\n然后你就可以创建你的VPS了，搭建SS服务器选择 $5/mon 的那最低端的配置，如有你有建站或者其他需求的话另行选择。经过测试San Francisco的机房延迟最低，平均在230ms左右。而Singapore的机房延迟在280ms，还有5%左右的丢包率。所以经过几次创建后又销毁重新创建地倒腾，我最后还是选择了使用San Francisco的节点。另外操作系统的话，我选择的是ubuntu的，看个人喜好选择吧。\r\n\r\nTips:贴一个测速地址，这也是后来找到的。-->  [Digitalocean服务器测速](http://speedtest-sfo2.digitalocean.com/)\r\n\r\n## ShadowSocks\r\n\r\n### SS介绍\r\n[ShadowSocks](https://github.com/shadowsocks)是科学上网的利器，在Github上接近1.4W的Star，使用的人极多、影响极深。而且它对各个平台的支持也非常好，目前我在Windows/Android平台上都完成了科学上网环境的搭建。\r\n\r\n### 建立shadowsocks服务端\r\n\r\n在你的droplets的控制面板上，在你的服务器名后点击下拉more，再点击accessv console进入远程终端的连接。  \r\n![这里写图片描述](http://img.blog.csdn.net/20160816163553145)\r\n\r\n*  Tips:记下你的服务器IP地址，配置客户端会用到。\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160816163154280)\r\n\r\n初次进入需要输入原始的账号密码，账号是root，密码会在注册邮箱中找到（在创建完droplet后发送至邮箱），输入完原始的账号密码后，系统会让你再次输入原始的密码来改变密码，所以又要再次输入三次密码，第一次是原始密码，第二，三次是修改后密码。\r\n\r\n### 在VPS上安装shadowsocks\r\n\r\n在服务端输入以下指令安装pip工具，然后使用pip安装shadowsocks：\r\n\r\n```shell\r\napt-get install python-pip\r\npip install shadowsocks\r\n```\r\n\r\n### 配置shadowsocks服务\r\n\r\n安装完毕之后，需要创建json文件来配置服务器的参数，命令如下：\r\n \r\n```shell\r\nvi  /etc/shadowsocks.json\r\n```\r\n编辑该文件,内容如下：\r\n\r\n```shell\r\n{\r\n    \"server\":\"0.0.0.0\",\r\n    \"server_port\":9898,   #服务端口号记好，配置客户端会用到\r\n    \"local_address\": \"127.0.0.1\",\r\n    \"local_port\":1080,\r\n    \"password\":\"password\",  #密码记住，配置客户端会用到\r\n    \"timeout\":300,\r\n    \"method\":\"aes-256-cfb\"  #加密方式\r\n}\r\n```\r\n\r\nTips:点击 i 进入编辑模式,编辑完成后按Esc退出编辑，输入:wq!退出保存。\r\n\r\n\r\n### 后台启动服务端的SS服务\r\n\r\n\r\n```shell\r\nssserver -c /etc/shadowsocks.json -d start\r\n```\r\n\r\n###  SS客户端下载\r\n\r\n前往GitHub托管的[ShadowSocks](https://github.com/shadowsocks)项目下载相应客户端。  \r\n这里仅贴出windows版本：[下载地址](https://github.com/shadowsocks/shadowsocks-csharp/releases/download/2.5.6/Shadowsocks-win-2.5.6.zip)\r\n\r\n###  客户端配置\r\n\r\n编辑服务器->添加服务器->修改以下项:\r\n\r\n```\r\n服务器地址：你的服务器地址\r\n服务器端口：\"server_port\"\r\n密码： \"yourpassword\"\r\n加密： \"aes-256-cfb\"\r\n```\r\n\r\n配置完成后勾选启动代理，就可以访问外网，获取你所需要的资源了。\r\n\r\n\r\n贴张图表示下 ---> YouTube 1080P 毫无压力\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20160819235904373)\r\n\r\n\r\n> 如有疑问请留言或者给我来信。  再随手打波广告：需要SS帐号的可以联系我，可提供SS帐号，价格实惠速度有保证，可先试用再确定是否购买。      　　------ Emailto: waynechu@waynechu.cn\r\n\r\n文章来自:  [拓扑部落（topblog.top）>>](http://www.topblog.top) [在VPS上搭建shadowsocks来科学上网](http://www.topblog.top/?p=60)\r\n');
INSERT INTO `t_article` VALUES ('9', 'Linux之ps命令详解', '2', '11', null, '2017-08-19 19:30:54', '---\r\nlayout: post\r\ntitle: Linux之ps命令详解\r\ncategory: Linux\r\ntags: [Linux]\r\n---\r\n\r\n## ps命令简介\r\n\r\n* Linux中的ps命令是Process Status的缩写。ps命令用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。\r\n* 要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，而 ps 命令就是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。\r\n* ps为我们提供了进程的一次性的查看，它所提供的查看结果并不动态连续的；如果想对进程时间监控，应该用 top 工具。\r\n* kill 命令用于杀死进程。\r\n* **通过 \'man ps\' 可以获得ps的详细参数用法。由于ps能够支持的系统类型相当的多，所以他的参数多的离谱，详细的用法应该要参考  \'man ps\'**\r\n\r\n## 进程的状态\r\n\r\n### linux上进程有5种状态\r\n\r\n* 运行(正在运行或在运行队列中等待) \r\n* 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号) \r\n* 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生) \r\n* 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放) \r\n* 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行) \r\n\r\n### ps工具标识进程的5种状态码\r\n\r\n*  D 不可中断 uninterruptible sleep (usually IO) \r\n*  R 运行 runnable (on run queue) \r\n*  S 中断 sleeping \r\n*  T 停止 traced or stopped \r\n*  Z 僵死 a defunct (”zombie”) process \r\n\r\n## ps命令格式及功能\r\n\r\n* 命令格式  \r\nps[参数]\r\n\r\n* 命令功能  \r\n用来显示当前进程的状态\r\n\r\n* 命令参数  \r\na  显示所有进程  \r\n-a 显示同一终端下的所有程序 \r\n-A 显示所有进程  \r\nc  显示进程的真实名称  \r\n-N 反向选择  \r\n-e 等于“-A”  \r\ne  显示环境变量   \r\nf  显示程序间的关系  \r\n-H 显示树状结构  \r\nr  显示当前终端的进程  \r\nT  显示当前终端的所有程序  \r\nu  指定用户的所有进程  \r\n-au 显示较详细的资讯  \r\n-aux 显示所有包含其他使用者的行程   \r\n-C<命令> 列出指定命令的状况  \r\n--lines<行数> 每页显示的行数  \r\n--width<字符数> 每页显示的字符数  \r\n--help 显示帮助信息  \r\n--version 显示版本显示  \r\n\r\n## 使用实例\r\n\r\n### 显示所有进程信息\r\n\r\n命令：\r\n\r\n```\r\nps -A\r\n```\r\n输出：\r\n\r\n```\r\n[root@localhost test6]# ps -A\r\n  PID TTY          TIME CMD\r\n    1 ?        00:00:00 init\r\n    2 ?        00:00:01 migration/0\r\n    3 ?        00:00:00 ksoftirqd/0\r\n    4 ?        00:00:01 migration/1\r\n    5 ?        00:00:00 ksoftirqd/1\r\n    6 ?        00:29:57 events/0\r\n    7 ?        00:00:00 events/1\r\n    8 ?        00:00:00 khelper\r\n   49 ?        00:00:00 kthread\r\n   54 ?        00:00:00 kblockd/0\r\n   55 ?        00:00:00 kblockd/1\r\n   56 ?        00:00:00 kacpid\r\n  217 ?        00:00:00 cqueue/0\r\n    ……省略部分结果\r\n```\r\n\r\n\r\n### 显示指定用户信息\r\n\r\n命令：\r\n\r\n```\r\nps -u root\r\n```\r\n输出：\r\n\r\n```\r\n[root@localhost test6]# ps -u root\r\n  PID TTY          TIME CMD\r\n    1 ?        00:00:00 init\r\n    2 ?        00:00:01 migration/0\r\n    3 ?        00:00:00 ksoftirqd/0\r\n    4 ?        00:00:01 migration/1\r\n    5 ?        00:00:00 ksoftirqd/1\r\n    6 ?        00:29:57 events/0\r\n    7 ?        00:00:00 events/1\r\n    8 ?        00:00:00 khelper\r\n   49 ?        00:00:00 kthread\r\n   54 ?        00:00:00 kblockd/0\r\n   55 ?        00:00:00 kblockd/1\r\n   56 ?        00:00:00 kacpid\r\n    ……省略部分结果\r\n```\r\n\r\n### 显示所有进程信息，连同命令行\r\n\r\n命令：\r\n\r\n```\r\nps -ef\r\n```\r\n\r\n输出：\r\n\r\n```\r\nUID        PID  PPID  C STIME TTY          TIME CMD\r\nroot         1     0  0 Nov02 ?        00:00:00 init [3]                  \r\nroot         2     1  0 Nov02 ?        00:00:01 [migration/0]\r\nroot         3     1  0 Nov02 ?        00:00:00 [ksoftirqd/0]\r\nroot         4     1  0 Nov02 ?        00:00:01 [migration/1]\r\nroot         5     1  0 Nov02 ?        00:00:00 [ksoftirqd/1]\r\nroot         6     1  0 Nov02 ?        00:29:57 [events/0]\r\nroot         7     1  0 Nov02 ?        00:00:00 [events/1]\r\nroot         8     1  0 Nov02 ?        00:00:00 [khelper]\r\nroot        49     1  0 Nov02 ?        00:00:00 [kthread]\r\nroot        54    49  0 Nov02 ?        00:00:00 [kblockd/0]\r\nroot        55    49  0 Nov02 ?        00:00:00 [kblockd/1]\r\nroot        56    49  0 Nov02 ?        00:00:00 [kacpid]\r\n……省略部分结果\r\n```\r\n\r\n### ps 与grep 常用组合用法，查找特定进程\r\n\r\n命令：\r\n\r\n```\r\nps -ef|grep ssh\r\n```\r\n\r\n输出：\r\n\r\n```\r\n[root@localhost test6]# ps -ef|grep ssh\r\nroot      2720     1  0 Nov02 ?        00:00:00 /usr/sbin/sshd\r\nroot     17394  2720  0 14:58 ?        00:00:00 sshd: root@pts/0 \r\nroot     17465 17398  0 15:57 pts/0    00:00:00 grep ssh\r\n```\r\n\r\n### 将目前属于您自己这次登入的 PID 与相关信息列示出来\r\n\r\n命令：\r\n\r\n```\r\nps -l\r\n```\r\n\r\n输出：\r\n\r\n```\r\n[root@localhost test6]# ps -l\r\nF S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\r\n4 S     0 17398 17394  0  75   0 - 16543 wait   pts/0    00:00:00 bash\r\n4 R     0 17469 17398  0  77   0 - 15877 -      pts/0    00:00:00 ps\r\n```\r\n\r\n各相关信息的意义：\r\n\r\n* F 代表这个程序的旗标 (flag)， 4 代表使用者为 super user\r\n* S 代表这个程序的状态 (STAT)，关于各 STAT 的意义将在内文介绍\r\n* UID 程序被该 UID 所拥有\r\n* PID 就是这个程序的 ID ！\r\n* PPID 则是其上级父程序的ID\r\n* C CPU 使用的资源百分比\r\n* PRI 这个是 Priority (优先执行序) 的缩写，详细后面介绍\r\n* NI 这个是 Nice 值，在下一小节我们会持续介绍\r\n* ADDR 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 \"-\"\r\n* SZ 使用掉的内存大小\r\n* WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作\r\n* TTY 登入者的终端机位置\r\n* TIME 使用掉的 CPU 时间。\r\n* CMD 所下达的指令为何\r\n* 在预设的情况下， ps 仅会列出与目前所在的 bash shell 有关的 PID 而已，所以， 当我使用 ps -l 的时候，只有三个 PID。\r\n\r\n### 列出目前所有的正在内存当中的程序\r\n\r\n命令：\r\n\r\n```\r\nps aux\r\n```\r\n\r\n输出：\r\n\r\n```\r\n[root@localhost test6]# ps aux\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot         1  0.0  0.0  10368   676 ?        Ss   Nov02   0:00 init [3]                  \r\nroot         2  0.0  0.0      0     0 ?        S<   Nov02   0:01 [migration/0]\r\nroot         3  0.0  0.0      0     0 ?        SN   Nov02   0:00 [ksoftirqd/0]\r\nroot         4  0.0  0.0      0     0 ?        S<   Nov02   0:01 [migration/1]\r\nroot         5  0.0  0.0      0     0 ?        SN   Nov02   0:00 [ksoftirqd/1]\r\nroot         6  0.0  0.0      0     0 ?        S<   Nov02  29:57 [events/0]\r\nroot         7  0.0  0.0      0     0 ?        S<   Nov02   0:00 [events/1]\r\nroot         8  0.0  0.0      0     0 ?        S<   Nov02   0:00 [khelper]\r\nroot        49  0.0  0.0      0     0 ?        S<   Nov02   0:00 [kthread]\r\nroot        54  0.0  0.0      0     0 ?        S<   Nov02   0:00 [kblockd/0]\r\nroot        55  0.0  0.0      0     0 ?        S<   Nov02   0:00 [kblockd/1]\r\nroot        56  0.0  0.0      0     0 ?        S<   Nov02   0:00 [kacpid]\r\n……省略部分结果\r\n```\r\n\r\n各相关信息的意义：\r\n\r\n* USER：该 process 属于那个使用者账号的\r\n* PID ：该 process 的号码\r\n* %CPU：该 process 使用掉的 CPU 资源百分比\r\n* %MEM：该 process 所占用的物理内存百分比\r\n* VSZ ：该 process 使用掉的虚拟内存量 (Kbytes)\r\n* RSS ：该 process 占用的固定的内存量 (Kbytes)\r\n* TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。\r\n* STAT：该程序目前的状态，主要的状态有\r\n* R ：该程序目前正在运作，或者是可被运作\r\n* S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。\r\n* T ：该程序目前正在侦测或者是停止了\r\n* Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态\r\n* START：该 process 被触发启动的时间\r\n* TIME ：该 process 实际使用 CPU 运作的时间\r\n* COMMAND：该程序的实际指令\r\n\r\n### 列出类似程序树的程序显示\r\n\r\n命令：\r\n\r\n```\r\nps -axjf\r\n```\r\n\r\n输出：\r\n\r\n```\r\n[root@localhost test6]# ps -axjf\r\nWarning: bad syntax, perhaps a bogus \'-\'? See /usr/share/doc/procps-3.2.7/FAQ\r\n PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND\r\n    0     1     1     1 ?           -1 Ss       0   0:00 init [3]                  \r\n    1     2     1     1 ?           -1 S<       0   0:01 [migration/0]\r\n    1     3     1     1 ?           -1 SN       0   0:00 [ksoftirqd/0]\r\n    1     4     1     1 ?           -1 S<       0   0:01 [migration/1]\r\n    1     5     1     1 ?           -1 SN       0   0:00 [ksoftirqd/1]\r\n    1     6     1     1 ?           -1 S<       0  29:58 [events/0]\r\n    1     7     1     1 ?           -1 S<       0   0:00 [events/1]\r\n    1     8     1     1 ?           -1 S<       0   0:00 [khelper]\r\n    1    49     1     1 ?           -1 S<       0   0:00 [kthread]\r\n   49    54     1     1 ?           -1 S<       0   0:00  \\_ [kblockd/0]\r\n   49    55     1     1 ?           -1 S<       0   0:00  \\_ [kblockd/1]\r\n   49    56     1     1 ?           -1 S<       0   0:00  \\_ [kacpid]\r\n```\r\n\r\n### 找出与cron,syslog有关的PID号码\r\n命令：\r\n\r\n```\r\n[root@localhost test6]# ps aux | egrep \'(cron|syslog)\'\r\n```\r\n\r\n输出：\r\n\r\n```\r\nroot      2682  0.0  0.0  83384  2000 ?        Sl   Nov02   0:00 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5\r\nroot      2735  0.0  0.0  74812  1140 ?        Ss   Nov02   0:00 crond\r\nroot     17475  0.0  0.0  61180   832 pts/0    S+   16:27   0:00 egrep (cron|syslog)\r\n```\r\n\r\n### 其他实例\r\n\r\n* 可以用 \\| 管道和 more 连接起来分页查看\r\n\r\n命令：\r\n\r\n```\r\nps -aux |more\r\n```\r\n* 把所有进程显示出来，并输出到ps001.txt文件\r\n\r\n命令：\r\n\r\n```\r\nps -aux > ps001.txt\r\n```\r\n\r\n* 输出指定的字段\r\n\r\n命令：\r\n\r\n```\r\n ps -o pid,ppid,pgrp,session,tpgid,comm\r\n```\r\n\r\n输出：\r\n\r\n```\r\nPID  PPID  PGRP  SESS TPGID COMMAND\r\n17398 17394 17398 17398 17478 bash\r\n17478 17398 17478 17398 17478 ps\r\n```\r\n');
INSERT INTO `t_article` VALUES ('10', 'Git常用命令及github的使用', '2', '6', null, '2017-08-19 20:29:54', '---\r\nlayout: post\r\ntitle: Git常用命令及github的使用\r\ncategory: git & github\r\ntags: [git & github]\r\n---\r\n\r\n## Git环境的搭建\r\n\r\n### 安装前的准备\r\n\r\n* 检查是否安装ssh,如果没有则安装\r\n* 检查是否存在ssh公钥\r\n\r\n```\r\n$ cd ~/.ssh\r\n```\r\n\r\n### 安装Git\r\n\r\n```\r\n$ sudo apt-get install git\r\n```\r\n\r\n### 生成ssh公钥\r\n\r\n```\r\n$ ssh-keygen -t rsa -C [sample@mail.com]\r\n```\r\n\r\n### 将公钥添加到github\r\n\r\n打开github，找到账户里面添加SSH，把~/.ssh/idrsa.pub的内容复制到key里面。\r\n\r\n### 测试是否生效\r\n\r\n```\r\n$ ssh -T git@github.com\r\nbalabala...\r\n// 输入yes\r\nHi username! \r\nYou\'ve successfully authenticated, but GitHub does not provide shell access.\r\n// 连接成功\r\n```\r\n\r\n## git常见命令\r\n\r\n### 创建代码库\r\n\r\n```\r\n// 在当前目录新建一个Git代码库\r\n$ git init\r\n// 下载项目及历史代码\r\n$ git clone [url]\r\n```\r\n\r\n### 配置Git\r\n\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n\r\n```\r\n// 显示当前的Git配置\r\n$ git config --list\r\n// 配置用户名\r\n$ git config --global user.name [your_name]\r\n// 配置email\r\n$ git config --global user.email [your_email]\r\n```\r\n\r\n### 将修改提交到暂存区\r\n\r\n```\r\n// 添加指定文件\r\n$ git add [file1] [file2] ...\r\n// 添加指定目录，包括子目录\r\n$ git add [dir]\r\n// 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n```\r\n\r\n### 将修改提交到版本库\r\n\r\n```\r\n// 提交暂存区到版本库\r\n$ git commit -m [message]\r\n// 提交暂存区的指定文件到版本库\r\n$ git commit [file1] [file2] ... -m [message]\r\n// 提交工作区自上次commit之后的变化，直接到版本库\r\n$ git commit -a\r\n// 提交时显示所有diff信息\r\n$ git commit -v\r\n```\r\n\r\n### git分支与版本管理\r\n\r\n```\r\n// 列出所有本地分支\r\n$ git branch\r\n// 列出所有远程分支\r\n$ git branch -r\r\n// 列出所有本地分支和远程分支\r\n$ git branch -a\r\n// 新建一个分支，但依然停留在当前分支\r\n$ git branch [branch-name]\r\n// 新建一个分支，并切换到该分支\r\n$ git checkout -b [branch]\r\n// 新建一个分支，指向指定commit\r\n$ git branch [branch] [commit]\r\n// 新建一个分支，与指定的远程分支建立追踪关系\r\n$ git branch --track [branch] [remote-branch]\r\n// 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n// 切换到上一个分支\r\n$ git checkout -\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\n$ git branch --set-upstream [branch] [remote-branch]\r\n// 合并指定分支到当前分支\r\n$ git merge [branch]\r\n// 选择一个commit，合并进当前分支\r\n$ git cherry-pick [commit]\r\n// 删除分支\r\n$ git branch -d [branch-name]\r\n// 删除远程分支\r\n$ git push origin --delete [branch-name]\r\n$ git branch -dr [remote/branch]\r\n```\r\n\r\n### git标签管理\r\n\r\n```\r\n// 列出所有tag\r\n$ git tag\r\n// 新建一个tag在当前commit\r\n$ git tag [tag]\r\n// 新建一个tag在指定commit\r\n$ git tag [tag] [commit]\r\n// 删除本地tag\r\n$ git tag -d [tag]\r\n// 删除远程tag\r\n$ git push origin :refs/tags/[tagName]\r\n// 查看tag信息\r\n$ git show [tag]\r\n// 提交指定tag\r\n$ git push [remote] [tag]\r\n// 提交所有tag\r\n$ git push [remote] --tags\r\n// 新建一个分支，指向某个tag\r\n$ git checkout -b [branch] [tag]\r\n```\r\n\r\n### git查看信息\r\n\r\n```\r\n// 显示有变更的文件\r\n$ git status\r\n// 显示当前分支的版本历史\r\n$ git log\r\n// 显示commit历史，以及每次commit发生变更的文件\r\n$ git log --stat\r\n// 搜索提交历史，根据关键词\r\n$ git log -S [keyword]\r\n// 显示某个commit之后的所有变动，每个commit占据一行\r\n$ git log [tag] HEAD --pretty=format:%s\r\n// 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\r\n$ git log [tag] HEAD --grep feature\r\n// 显示某个文件的版本历史，包括文件改名\r\n$ git log --follow [file]\r\n$ git whatchanged [file]\r\n// 显示指定文件相关的每一次diff\r\n$ git log -p [file]\r\n// 显示过去5次提交\r\n$ git log -5 --pretty --oneline\r\n// 显示所有提交过的用户，按提交次数排序\r\n$ git shortlog -sn\r\n// 显示指定文件是什么人在什么时间修改过\r\n$ git blame [file]\r\n// 显示暂存区和工作区的差异\r\n$ git diff\r\n// 显示暂存区和上一个commit的差异\r\n$ git diff --cached [file]\r\n// 显示工作区与当前分支最新commit之间的差异\r\n$ git diff HEAD\r\n// 显示两次提交之间的差异\r\n$ git diff [first-branch]...[second-branch]\r\n// 显示今天你写了多少行代码\r\n$ git diff --shortstat \"@{0 day ago}\"\r\n// 显示某次提交的元数据和内容变化\r\n$ git show [commit]\r\n// 显示某次提交发生变化的文件\r\n$ git show --name-only [commit]\r\n// 显示某次提交时，某个文件的内容\r\n$ git show [commit]:[filename]\r\n// 显示当前分支的最近几次提交\r\n$ git reflog\r\n```\r\n\r\n### github代码提交\r\n\r\n```\r\n// 下载远程仓库的所有变动\r\n$ git fetch [remote]\r\n// 显示所有远程仓库\r\n$ git remote -v\r\n// 显示某个远程仓库的信息\r\n$ git remote show [remote]\r\n// 增加一个新的远程仓库，并命名\r\n$ git remote add [shortname] [url]\r\n// 取回远程仓库的变化，并与本地分支合并\r\n$ git pull [remote] [branch]\r\n// 上传本地指定分支到远程仓库\r\n$ git push [remote] [branch]\r\n// 强行推送当前分支到远程仓库，即使有冲突\r\n$ git push [remote] --force\r\n// 推送所有分支到远程仓库\r\n$ git push [remote] --all\r\n```\r\n\r\n### 撤销修改\r\n\r\n```\r\n// 恢复暂存区的指定文件到工作区\r\n$ git checkout [file]\r\n// 恢复某个commit的指定文件到暂存区和工作区\r\n$ git checkout [commit] [file]\r\n// 恢复暂存区的所有文件到工作区\r\n$ git checkout .\r\n// 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\r\n$ git reset [file]\r\n// 重置暂存区与工作区，与上一次commit保持一致\r\n$ git reset --hard\r\n// 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\r\n$ git reset [commit]\r\n// 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\r\n$ git reset --hard [commit]\r\n// 重置当前HEAD为指定commit，但保持暂存区和工作区不变\r\n$ git reset --keep [commit]\r\n// 新建一个commit，用来撤销指定commit\r\n// 后者的所有变化都将被前者抵消，并且应用到当前分支\r\n$ git revert [commit]\r\n// 暂时将未提交的变化移除，稍后再移入\r\n$ git stash\r\n$ git stash pop\r\n```\r\n');
INSERT INTO `t_article` VALUES ('11', '快速排序及其改进算法', '2', '1', null, '2017-08-19 21:35:17', '---\r\nlayout: post\r\ntitle: 快速排序及其改进算法\r\ncategory: 算法设计与分析\r\ntags: [算法设计与分析]\r\n---\r\n\r\n> 算法设计与分析结课报告\r\n>\r\n> 快速排序及其改进算法-Fast sorting and its improved algorithm\r\n\r\n## 摘  要\r\n\r\n快速排序是排序算法中性能较好的一种，但存在对数据有序或者基本有序的情形下的性能瓶颈问题。\r\n\r\n本文除了介绍经典的快速排序算法之外，还将介绍一些对排序算法优化的算法。通过实验数据证明改进算法的合理性和优越性，但也不乏一些局限性。在实际工作参考和使用的过程中，还要结合具体情况对快速排序算法进行优化。\r\n\r\n关键词  快速排序算法；快速排序改进算法； \r\n\r\n## 第1章  引  言\r\n\r\n快速排序(Quicksort)，又称划分交换排序(partition-exchange sort)，由C. A. R. Hoare在1962年提出。快速排序算法的最好时间复杂性为O(n·log n)，最坏的时间复杂性为O (n2)，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n·log n)算法更快，因为它的内部循环(inner loop)可以在大部分的架构上很有效率地被实现出来。\r\n\r\n## 第2章  快速排序\r\n\r\n### 2.1  快速排序算法的基本思想\r\n\r\n快速排序的基本思想是：通过一趟扫描将待排序的元素分割成独立的三个序列：第一个序列中的所有元素均不大于基准元素、第二个序列是基准元素、第三个序列中的所有元素均不小于基准元素。由于第二个序列已经处于正确位置，因此需要再按照此方法对第一个序列和第三个序列分别进行排序，整个排序的过程可以递归进行，最终可使整个序列变成有序序列。\r\n\r\n（1）快速排序算法的分治策略体现\r\n快速排序的基本思想是基于分治策略的，利用分治法可将快速排序的基本思想描述如下：设当前待排序的序列为R[ low : high ]，其中 low≤high，如果序列的规模足够小则直接进行排序，否则分三步处理：①分解 ②求解子问题 ③合并\r\n\r\n（2）基准元素的选取\r\n从待排序序列中选取指导划分的基准元素是决定算法性能的关键。基准元素的选取应该遵循平衡子问题的原则，即使得划分后的两个子序列的长度尽量相同。选取的基准元素一定要保证算法正常结束。\r\n\r\n### 2.2 快速排序算法描述\r\n\r\n```Java\r\nvoid QuickSort(int R[], int low, int high)\r\n{\r\n  int pivotpos; //基准元素\r\n  if(low < high) //区间长度大于1时才须排序\r\n  {\r\n    pivotpos = Partition(R, low, high); //对元素集做划分\r\n    QuickSort(R, low, pivotpos-1); //对左区间递归排序\r\n    QuickSort(R, pivotpos+1, high); //对右区间递归排序\r\n  }\r\n}\r\n```\r\n\r\n对待排元素集R进行排序，最初的调用是QuickSort(R，1，length[S])。但是快速排序算法的关键是 Partition过程，由它对元素集及其子集进行划分。\r\n\r\n### 2.3  快速排序算法一次划分的步骤\r\n\r\n假设待排序序列为R[ low : high ]，该划分过程以第一个元素作为基准元素。\r\n步骤1：设置两个参数i和j，它们的初值分别为待排序序列的下界和上界，即i=low，j=high。\r\n步骤2：选取待排序序列的第一个元素R[low]作为基准元素，并将该值赋给变量pivot(基准元素)。\r\n步骤3：令j自j位置开始向前扫描，直到扫描到第一个小于pivot的元素R[j]，将R[j]与R[i]进行交换，i++。\r\n步骤4：令i自i位置开始向后扫描，直到扫描到第一个大于pivot的元素R[i]，将R[j]与R[i]进行交换，j--。\r\n步骤5：重复步骤3、4，从两端向中间靠拢直至i=j。此时i和j同时指向pivot的最终位置。\r\n\r\n划分算法描述如下：\r\n\r\n```Java\r\nint Partition(int R[], int low, int high)\r\n{\r\n  int I = low, j = high, pivot = R[low];//用序列的第一个元素作为基准元素\r\n  while( i < j ) //从序列两端向中间扫描，直至i等于j\r\n  {\r\n    while( i < j && R[j] >= pivot)\r\n      j--; //从后往前查找第1个小于pivot的元素\r\n    if(i<j) //查找到小于pivot的元素\r\n      swap(R[i++], R[j]); //交换R[i]和R[j],并且i+1\r\n    while( i < j && R[i] <= pivot)\r\n      i++; //从前往后查找第1个大于pivot的元素\r\n    if(i<j) //查找到大于pivot的元素\r\n      swap(R[i], R[j--]); //交换R[i]和R[j],并且j-1\r\n  }\r\nreturn j;\r\n}\r\n```\r\n\r\n### 2.4  优缺点分析\r\n\r\n快速排序算法的时间主要耗费在划分操作上，并于划分是否平衡密切相关。\r\n（1）最坏时间复杂性\r\n最坏情况为每次划分选取的基准元素为待排序列最小（或最大）元素，导致划分后仅有一个元素到达正确的位置。并且可以求得最坏时间复杂性为O (n2)。\r\n（2）最好时间复杂性\r\n最好情况为每次划分选取的基准元素为待排序列的“中值”元素，此时时间复杂性为O (n·logn)。\r\n（3）平均时间复杂度\r\n使用归纳法可求得平均时间复杂性的数量级也为O (n·logn)。\r\n（4）空间复杂性\r\n最好情况下递归所需栈空间为O (n·logn)，最坏O (n)，平均O (logn)。\r\n\r\n优点：快速排序的优点在于平均性能好，快速排序算法是基于元素比较的内部排序算法中最快的，因此得名快速排序。\r\n缺点：当初始序列呈基本有序状态时，退化为冒泡排序，时间复杂度下降为O (n2)，当序列有序或者逆序的情况下最不利于发挥其长处。\r\n\r\n## 第3章  改进算法\r\n\r\n逐个介绍自己查到的改进算法（作者、论文题目、改进的具体内容，效果如何）\r\n\r\n### 3.1  通过优化基准元素的选取\r\n\r\n> 以下两种方法来自《现代电子技术》期刊第36卷第20期\r\n> 文章题目：《快速排序算法的分析与研究》 作者：王春红; 王文霞\r\n\r\n第 1 种方法是“三者取中值”的规则[1-2]。首先，比较待排数据中第一 、中间和最后一个位置上元素的关键字，取三者的中值为基准元素。然后，在划分开始前将该基准元素和该区间的第1个元素进行交换，此后的划分过程与上面所给的 PARTITION 算法完全相同。实践表明，采用三元素取中值的只需要几条if语句的判断即可，在时间上、空间上不会增加额外的开销，但结果可以大大改善快速排序在最坏情况下的性能。\r\n\r\n第2种方法是随机化快速排序[3]。算法思路：每趟划分选取的基准元素不是固定的，而是用随机数产生器 Random(l, h) 随机选取位于 l 和 h 之间的随机数 t(l ≤ t ≤ h)，然后用 S[t] 作为支点元素。这就打破了传统快速排序对数据元素初始输的依赖，相当于S[l..h]中的元素是随机分布的。\r\n\r\n随机化快速排序算法描述如下：\r\n\r\n```Java\r\nvoid Randomize_QuickSort(int R[], int low, int high)\r\n{\r\n  int pivotpos; //基准元素\r\n  if(low < high) //区间长度大于1时才须排序\r\n  {\r\n    pivotpos = Randomize_Partition(R, low, high); //使用随机分治法来划分\r\n    Randomize_QuickSort(R, low, pivotpos-1); //对左区间递归排序\r\n    Randomize_QuickSort(R, pivotpos+1, high); //对右区间递归排序\r\n  }\r\n}\r\n\r\nint Randomize_Partition(int R[], int low, int high) //随机分治法\r\n{\r\n  int t = Random(low, high); //在low和high之间产生一个随机整数\r\n  Swap(R[t],R[l]); //将选中的基准元素和首元素交换位置\r\n  Retrun Partition(int R[], int low, int high); //调用常规划分方法\r\n}\r\n```\r\n\r\n经实验对比，在元素有序情况下，两种排序算法在规模分别为100，200，500时比较次数的统计情况对比，如表3.1所示。\r\n\r\n| 数据规模     | 100  | 200   | 500    |\r\n| -------- | ---- | ----- | ------ |\r\n| 随机快排比较次数 | 854  | 2078  | 6194   |\r\n| 快速排序比较次数 | 4950 | 19900 | 124750 |\r\n\r\n表3.1 两种排序算法的比较\r\n\r\n--------\r\n\r\n> 以下方法来自《计算机工程》期刊第37卷第6期\r\n> \r\n> 文章题目：《高效快速排序算法研究》 作者：汤亚玲；秦锋\r\n\r\n该篇文章提到的高效快速排序算法[4]和上面提到的“三者取中值”算法类似，基本思想是计算待排序序列的平均值，将平均值作为基准元素。由于算法从待排序数据均值的角度进行划分，能保证在最短的划分次数下，实现每次排序码划分成大小基本相等的两部分，因此快速排序的理想情况下的性能分析对于高效快速排序是适用的，即高效快速排序的性能始终都能保持在O(nlogn)。\r\n\r\n从性能结果上看，每次求数据均值的时间代价并没有影响算法的整体效率，反而从根本上保证了算法性能的稳定性。同时，由于其划分均匀，性能稳定，数据是否已经有序或者是否存在孤立的数据点对排序性能的影响都很小。\r\n\r\n下面的代码为递归思想描述的高效快速排序算法：\r\n\r\n```Java\r\n/*求出数组中元素从ay[l]到ay[r]中的平均值*/\r\nint f_avg(int *ay,unsigned long int l,unsigned long int r,long int *avg) \r\n{ int i; \r\n  if(r<l) return 0; /*检验参数 l,r 的合法性*/\r\n  else\r\n  { *avg=0; \r\n\r\n    for( i=l;i<=r;i++) \r\n      *avg+=ay[i]/(r-l+1); /*求出平均值*/\r\n    return 1; \r\n  } \r\n} \r\n/*高效快速排序*/\r\n/*对数组 ay 中下标从 l 到 r 的元素进行排序*/\r\nvoid EQ_sort(int *ay, unsigned long int l, unsigned long int r ) \r\n{\r\n  unsigned long int i,j; long int mid; \r\n  if(r<=l)return; /*待排序码个数小于 2 个，算法结束*/\r\n  if(!f_avg(ay,l,r,&mid)) return; \r\n  i=l;j=r; \r\n  while(i<j) \r\n  { while(ay[i]<=mid && i<j)i++; \r\n    while(ay[j]>=mid && i<j)j--; \r\n    if(i<j)\r\n      swap(a[i],a[j]); /*交换*/\r\n    else break; \r\n  }\r\n  if(l<j&&j<r) /*对划分得到的子序列进行递归调用*/\r\n  { Q_sort(ay, l, j-1); \r\n    Q_sort(ay, j, r); \r\n  } \r\n}\r\n```\r\n\r\n在迅驰 1.6  GHz、512 MB 内存，VC 6.0 平台上，对不同数据量进行测试(数据由随机函数 Rand()产生)。表 3.2、3.3 给出了各种排序方法在每种情形下所消耗的时间。\r\n\r\n| 排序数个数     | 归并排序 | 堆排序  | 快速排序 | 高效快速排序 |\r\n| --------- | ---- | ---- | ---- | ------ |\r\n| 800       | 0    | 0    | 0    | 0      |\r\n| 8000      | 10   | 10   | 0    | 0      |\r\n| 80 000    | 30   | 40   | 40   | 0      |\r\n| 800 000   | 470  | 511  | 401  | 10     |\r\n| 8 000 000 | 3525 | 9492 | 7761 | 120    |\r\n\r\n表3.2  一趟排序消耗时间对比（单位：ms）\r\n\r\n---------\r\n\r\n| 排序数个数     | 归并排序 | 堆排序  | 快速排序 | 高效快速排序 |\r\n| --------- | ---- | ---- | ---- | ------ |\r\n| 800       | 0    | 0    | 0    | 0      |\r\n| 8 000     | 20   | 10   | 170  | 0      |\r\n| 80 000    | 20   | 10   | 340  | 20     |\r\n| 800 000   | 80   | 70   | 堆栈溢出 | 30     |\r\n| 8 000 000 | 671  | 910  | 堆栈溢出 | 40     |\r\n\r\n表3.3  二趟排序消耗时间对比（单位：ms）\r\n\r\n高效快速排序是一种能稳定地将快速排序的时间效率改进到 nlogn 数量级的算法，通过充分的实验数据和理论证明了该算法的正确性和实用性。同时，高效快速排序递归深度为 logn，这在待排序数据量非常大(如达到天文数字级别)时，其引起的递归调用的时空开销不容忽视。\r\n\r\n### 3.2  用插入排序改进快速排序算法[5]\r\n\r\n> 以下方法来自《上饶师范学院学报》期刊第21卷第6期\r\n> \r\n> 文章题目：《快速排序的改进算法》 作者：周玉林；郑建秀\r\n\r\n根据插入排序在待排对象基本有序下具有较好性能这一特点[6]，改进快速排序，在快速排序的递归调用中，只对长度大于等于某数k时递归，最后再对整个序列用插入排序来完成排序过程。\r\n\r\n改进后的算法描述如下：\r\n\r\n```Java\r\nQUICK-INSERT-SORT(A,1,n)\r\n　QUICKSORT(A,1,n)  //先调用快速排序\r\n　For　j= 2 to n　do  //再采用插入排序对基本有序序列进行排序\r\n　　x= A[j]\r\n　　i= j - 1\r\n　　while i> 0 and A[i]> x do\r\n　　　A[i+1]= A[i]\r\n　　　i= i- 1\r\n　　if(i+1≠j)  then  A[i+1] = x\r\n\r\nQUICKSORT(A,p,r)\r\n　 if　r–p > k　then　//当区间长度大于k时递归, k为指定的某数\r\n　　 q= PARTITION(A,p,r)\r\n　 　QUICKSORT(A,p,q- 1)\r\n　 　QUICKSORT(A,q+ 1,r)\r\n\r\nPARTITION(A,p,r)\r\n  x= A[p]\r\n  i= p\r\n  j= r\r\n  while(i<j)do\r\n　　while( i<j )and( A[j]>x )do\r\n　　  j= j - 1\r\n　　A[i]= A[j]\r\n　　i= i+ 1\r\n　　while(i< j)and(A[i]< x)do\r\n　　　i= i+ 1\r\n　　A[j]= A[i]\r\n　　j= j- 1\r\nA[i]= x\r\n```\r\n\r\n改进后算法的平均时间复杂性为：2nln(n/k)- 3(n+ 1)/(k+ 1)+ nk/4+ O(lnn)，并且经计算和实验数据得出，使用该改进算法，当k=8左右的值时（即只对长度大于8的元素集合使用快速排序，否则使用插入排序）效果最佳！具体计算方法和实验数据请请参考当期文章。\r\n\r\n## 第4章  总结与体会\r\n\r\n快速排序的基本思想是基于分治策略，将一个序列利用基准元素分割为独立的三个序列（包括基准数）。然后对三个序列分别进行排序，整个排序的过程可以递归进行。\r\n优化快速排序，关键优化基准元素的选取，基准元素的大小直接决定了快速排序时间的复杂度。\r\n\r\n快速排序对于数量多，越无序的数列排序效果越好。所以在数据量少量，或者数据趋近有序的情况下可以使用其他排序算法进行排序。快速排序的使用也可以融合的其他排序算法优点，如在数据量小的时候使用插入排序等方法更加便捷。 \r\n\r\n## 参考文献\r\n[1]	王善坤,陶祯蓉.一种三路划分快速排序的改进算法[J].计算机应用研究,2012(7):2513-2516.\r\n\r\n[2]	严蔚敏,吴伟民.数据结构[M].北京:清华大学出版社,2008.\r\n\r\n[3]	王春红,王文霞.快速排序算法的分析与研究[J].现代电子技术,2012,36(20):54-56.\r\n\r\n[4]	汤亚玲,秦锋. 高效快速排序算法研究[J]. 计算机工程,2011,37(6):75-78.\r\n\r\n[5]	周玉林,郑建秀. 快速排序的改进算法[J]. 上饶师范学院学报,2001,20(6):11-15.\r\n\r\n[6]	潘金贵,顾铁成,等.现代计算机常用数据结构和算法[M].南京:南京大学出版社,1994.\r\n\r\n\r\n');
INSERT INTO `t_article` VALUES ('12', '递归算法之求解汉诺塔问题', '2', '9', null, '2017-08-19 21:36:24', '---\r\nlayout: post\r\ntitle: 递归算法之求解汉诺塔问题\r\ncategory: 算法设计与分析\r\ntags: [算法设计与分析]\r\n---\r\n\r\n## 递归算法之求解汉诺塔问题\r\n\r\n### Java程序代码\r\n\r\n```java\r\nimport java.util.Scanner;\r\n\r\npublic class HanoiDemo {\r\n	public static void main(String[] args) {\r\n		long startTime = System.nanoTime();\r\n		char a = \'A\';\r\n		char b = \'B\';\r\n		char c = \'C\';\r\n		System.out.print(\"请输入汉诺塔盘子数目:\");\r\n		Scanner s = new Scanner(System.in);\r\n		int n = s.nextInt();\r\n		s.close();\r\n		System.out.printf(\"%d个盘片的移动过程：\\n\", n);\r\n		hanoi(n, a, b, c);\r\n		\r\n	static void hanoi(int n, char a, char b, char c) {\r\n		if (n == 1) {\r\n			System.out.printf(\"盘片%d： %c → %c\\n\", n, a, c);\r\n		} else {\r\n			hanoi(n - 1, a, c, b);\r\n			System.out.printf(\"盘片%d： %c → %c\\n\", n, a, c);\r\n			hanoi(n - 1, b, a, c);\r\n		}\r\n	}\r\n}\r\n```\r\n\r\n### 运行截图\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_1.png)\r\n\r\n### 过程分析\r\n\r\n递归将难求解的大问题不断分解为新的子问题，从未知向已知推进。这里以个人熟悉的Java虚拟机对方法的递归执行过程进行解释\r\n\r\n1.首先为执行的移动的两条输出语句打上断点，方便观察每个递归方法执行的过程\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_2.png)\r\n\r\n2.Debug主程序并且输入盘子数目为4，可以观察到执行到第一次断点时，线程的方法栈中除了主方法对应的栈帧外，还有四个栈帧，是由递归调用`hanoi(n - 1, a, c, b);`产生的，并且每次递归调用时参数都在改变，此时方法栈情况如图所示。\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_3.png)\r\n\r\n3.继续执行程序，能够得到hanoi(1,a,c,b)的解。该方法对应的栈帧出栈，此时可以看到控制台输出第一次盘片移动过程\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_4.png)\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_5.png)\r\n\r\n4.继续执行程序`System.**out**.printf(\"盘片%d： %c → %c\\n\", n, a, c);`，控制台输出第二次盘片移动过程，这里打印语句模拟的是一次移动一个盘片的过程。程序执行到hanoi(n - 1, b, a, c); `有会有新的栈帧入栈\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_6.png)\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_7.png)\r\n\r\n5.继续执行程序，可以看到输出第三次盘片移动的过程，并且方法 hanoi(1,b,a,c) 和 hanoi(2,a,b,c) 对应的栈帧出栈，因为 hanoi(2,a,b,c) 方法的子方法为 hanoi(1,a,c,b) 和 hanoi(1,b,a,c)，能够直接求出移动过程\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_8.png)\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_9.png)\r\n\r\n6.继续执行程序，可以看到输出第四次盘片移动过程，并且方法hanoi(3,a,c,b) 创建了两个新的栈帧\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_10.png)\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_11.png)\r\n\r\n7.篇幅原因，省略往下继续执行的过程。从每步执行结果可以得知，Java虚拟机是通过虚拟机中的栈帧不断入栈和出栈来执行递归的方法。每当方法执行到递归出口时，就将该方法栈帧出栈，并且打印移动过程。当方法需要分解为子方法时，就为子方法创建相应个数的栈帧，并且子方法的栈帧位于父方法对应的栈帧之上。所以在方法栈的入栈和出栈过程中，完成了对大问题的逐步分解求解过程。但是，递归内存消耗很大。而且，如果递归深度太大，会导致栈深度超出虚拟机所允许的最大深度，抛出StackOverflowError异常！！此时可以调整虚拟机栈内存（-Xss参数）的大小来加深栈的深度。\r\n\r\n8.比如计算999个盘片的汉诺塔过程，如下图程序执行开始就会在方法栈中会创建1000个栈帧（其中一个为主方法对应的栈帧），程序继续执行的过程中为了保留子方法的现场，请求的栈深度还会不断加深，最终超出虚拟机允许的最大深度。\r\n\r\n使用递归虽然可以简化思维过程，效率和开销问题是递归最大的缺点。但是不可否认递归对解描述的直观性以及代码的简洁性，所以了解递归算法的过程，对递归算法的把握及使用场合的选择有重要意义！！！\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_12.png)\r\n\r\n10.下图是4个盘片移动的方法回调步骤，便于分析整个求解过程。\r\n\r\n![img](http://pro.topblog.top/pic/20170602_hanoi_13.png)\r\n');
INSERT INTO `t_article` VALUES ('13', 'JDBC 数据库连接', '2', '1', null, '2017-08-19 21:37:03', '---\r\nlayout: post\r\ntitle: JDBC 数据库连接\r\ncategory: Java\r\ntags: [Java]\r\n---\r\n\r\n\r\n## JDBC 编程步骤\r\n\r\n### 加载驱动程序\r\n\r\n```java\r\nClass.forName(driverClass)\r\n//加载MySql驱动\r\nClass.forName(\"com.mysql.jdbc.Driver\")\r\n//加载Oracle驱动\r\nClass.forName(\"oracle.jdbc.driver.OracleDriver\")\r\n```\r\n\r\n### 获得数据库连接\r\n\r\n```java\r\nDriverManager.getConnection(\"jdbc:mysql://127.0.0.1:3306/message\", \"root\", \"qweasd123\");\r\n```\r\n\r\n### 创建Statement对象(预编译)\r\n\r\n```java\r\nconn.createStatement();\r\nconn.prepareStatement(sql);\r\n```\r\n\r\n## PreparedStatement对象常用方法\r\n\r\n| 方法              | 返回值       | 作用                                       |\r\n| :-------------- | :-------- | :--------------------------------------- |\r\n| execute()       | boolean   | 执行 SQL 语句，该语句可以是任何种类的 SQL 语句             |\r\n| executeQuery()  | ResultSet | 执行 SQL 查询，并返回该查询生成的 ResultSet 对象。用来执行SELECT 语句 |\r\n| executeUpdate() | int       | 用于执行 INSERT、UPDATE 或 DELETE 语句以及 SQL DDL（数据定义语言）语句。创建表，改变表，删除表都是 DDL 语句 |\r\n\r\n## 常用数据库的连接\r\n\r\n| 数据库名称           | DRIVEN                                   | URL                                      |\r\n| :-------------- | :--------------------------------------- | :--------------------------------------- |\r\n| MySQL           | com.mysql.jdbc.Driver                    | jdbc:mysql://localhost:3306/DBname       |\r\n| Oracle SQL      | oracle.jdbc.driver.OracleDriver          | jdbc:oracle:thin:@localhost:1521:DBname  |\r\n| SQL Server 2008 | com.microsoft.sqlserver.jdbc.SQLServerDriver | jdbc:sqlserver://localhost:1433;DataBaseName=DBname |\r\n\r\n## 参考代码\r\n\r\n### DBHelper数据库连接类\r\n\r\n```java\r\npublic class DBHelper {\r\n    private static final String driver = \"com.mysql.jdbc.Driver\"; //数据库驱动\r\n    //连接数据库的URL地址\r\n    private static final String url=\"jdbc:mysql://localhost:3306/shopping?useUnicode=true&characterEncoding=UTF-8\";\r\n    private static final String username=\"root\";//数据库用户名\r\n    private static final String password=\"qweasd123\";//数据库的密码\r\n    private static Connection conn=null;\r\n    //静态代码块负责加载驱动\r\n    static\r\n    {\r\n        try\r\n        {\r\n            Class.forName(driver);\r\n        }\r\n        catch(Exception ex)\r\n        {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    //单例模式返回数据库连接对象\r\n    public static Connection getConnection() throws Exception\r\n    {\r\n        if(conn==null)\r\n        {\r\n            conn = DriverManager.getConnection(url, username, password);\r\n            return conn;\r\n        }\r\n        return conn;\r\n    }\r\n}\r\n```\r\n\r\n### DAO数据访问对象类\r\n\r\n```java\r\npublic class ItemsDAO {\r\n    //获得所有的商品信息\r\n    public ArrayList<Items> getAllItems() {\r\n        Connection conn = null;\r\n        PreparedStatement ptmt = null;\r\n        ResultSet rs = null;\r\n        ArrayList<Items> list = new ArrayList<Items>(); //商品集合\r\n        try {\r\n            conn = DBHelper.getConnection();\r\n            String sql = \"select * from items;\"; // SQL语句\r\n            ptmt = conn.prepareStatement(sql);\r\n            rs = ptmt.executeQuery();\r\n            while (rs.next()) {\r\n                Items item = new Items();   \r\n                item.setId(rs.getInt(\"id\"));\r\n                item.setName(rs.getString(\"name\"));\r\n                item.setCity(rs.getString(\"city\"));\r\n                item.setNumber(rs.getInt(\"number\"));\r\n                item.setPrice(rs.getInt(\"price\"));\r\n                item.setPicture(rs.getString(\"picture\"));\r\n                list.add(item);// 把一个商品加入集合\r\n            }\r\n            return list; //返回集合\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n            return null;\r\n        } finally {\r\n            // 释放数据集对象\r\n            if (rs != null) {\r\n                try {\r\n                    rs.close();\r\n                    rs = null;\r\n                } catch (Exception ex) {\r\n                    ex.printStackTrace();\r\n                }\r\n            }\r\n            // 释放语句对象\r\n            if (ptmt != null) {\r\n                try {\r\n                    ptmt.close();\r\n                    ptmt = null;\r\n                } catch (Exception ex) {\r\n                    ex.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n');
INSERT INTO `t_article` VALUES ('14', '递归算法、动态规划、0-1背包问题的总结', '2', '9', null, '2017-08-19 21:37:42', '---\r\nlayout: post\r\ntitle: 递归算法、动态规划、0-1背包问题的总结\r\ncategory: 算法设计与分析\r\ntags: [算法设计与分析]\r\n---\r\n\r\n## 递归算法\r\n\r\n问题：通过分析和运行二叉树遍历的递归和非递归算法，体会和总结递归算法的主要内容。\r\n\r\n解答：\r\n\r\n### 递归模型的组成\r\n\r\n一个递归模型是由“递归边界”和“递归体”两部分组成，前者确定递归到何时结束，后者确定递归求解时的递推关系。\r\n\r\n### 递归求解的原理\r\n\r\n把一个不能或者不好直接求解的“大问题”转化为一个或者几个“小问题”来解决；再把“小问题”进一步分解为更小的“小问题”来解决；如此分解，直到“小问题”可以直接求解，再逐一求值回归，最后到达递归的开始处。\r\n\r\n### 递归的实现步骤\r\n\r\n1)  执行到递归方法时保存现场\r\n\r\n2)  传递递归调用参数\r\n\r\n3)  执行递归代码段，并保存现场继续执行子方法\r\n\r\n4)  递归返回时先回收局部变量，再恢复递归前现场\r\n\r\n5)  逐层返回至递归开始处\r\n\r\n### 递归算法求解问题的一般步骤\r\n\r\n1)  分析问题、寻找递归关系\r\n\r\n2)  找出停止条件，即递归出口\r\n\r\n3)  设计递归算法、确定参数，即构建递归体\r\n\r\n## 动态规划\r\n\r\n问题：贪心法和动态规划法都是解决组合优化问题的有效策略，请根据所学知识分析总结二者的不同。\r\n\r\n解答：\r\n\r\n### 贪心算法和动态规划的不同点\r\n\r\n**贪心算法：**依赖于当前已经做出的所有选择，采用**自顶向下**的解决方法。能够使用贪心算法来求**近似最优解**的问题需要具有两大性质：①最优子结构性质 ②贪心选择性质\r\n\r\n**贪心算法的应用：** 单源最短路径问题、最小生成树、会场安排问题、数据压缩--哈夫曼编码等\r\n\r\n**动态规划：**动态规划实质是分治思想和解决冗余。将原问题分解为多个子问题，通过计算出子问题的结果构造一个最优解。动态规划通过迭代法**自底向上**求解，动态规划将分解后的子问题理解为相互间有联系、有重叠的部分。能够使用动态规划来求**最优解**的问题需要具有三大性质：①最优子结构性质 ②重叠子问题性质 ③自底向上的求解方法\r\n\r\n**动态规划的应用：** 最长公共子序列、最优二叉查找树、加工顺序问题、矩阵乘法等\r\n\r\n### 简单总结\r\n  - **求解策略不同：**贪心算法采用自顶向下逐步逼近的方式，只考虑最近一步的最优解；动态规划采用的是自底向上合并子问题求解方式，并且子问题是不独立的（分治法没有解决冗余，子问题是相互独立的）。\r\n\r\n  - **求得结果不同：**贪心算法求得的是近似最优解；动态规划能够求得最优解。\r\n\r\n## 0-1背包问题\r\n\r\n问题：什么是0-1背包问题，0-1背包问题有哪些解决策略，对这些解决策略进行详细的比较和分析。\r\n\r\n解答：\r\n\r\n### 什么是0-1背包问题\r\n\r\n给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内如何选择装入的物品使得总价格最高。\r\n\r\n### 解决策略\r\n\r\n1)  穷举法\r\n\r\n2)  贪心法（要注意得到不一定是最优解！）\r\n\r\n3)  动态规划法\r\n\r\n4)  回溯法\r\n\r\n5)  分支限界法\r\n\r\n### 各个策略的求解思路\r\n\r\n**穷举法：**用穷举法解决0-1背包问题，需要考虑给定n个物品集合的所有子集，然后找出所有总重量不超过背包重量的子集，计算每个子集的总重量，然后在他们中找到价值最大的子集。\r\n\r\n**贪心法：**用贪心算法求解0-1背包问题，首先计算每种物品单位重量的价值；然后依照贪心选择策略，选择单位重量价值最高的物品依次装入背包，直到背包装不下物品剩余任意一物品位置。\r\n\r\n**动态规划：**用动态规划求解0-1背包问题，关键是构造用于储存子问题的二维数组（或者用表的形式来展示）。求解n件物品放入W容量大小的问题，可以分解为求前n-1件物品放入容量为W-wn容量的背包时背包重量的最大值和放入第n件物品时背包重量之和。由于子问题无法求解，还能够继续分解，所以问题的实际求解过程是分析的逆过程：放入第一个物品的背包重量->放入前两个物品背包最大重量->放入前三个物品背包最大重量-> ...->放入前n-1个物品->放入n个物品背包最大重量。\r\n\r\n**回溯法：**使用回溯法求解0-1背包问题，首先定义问题的解空间为一颗深度等于物品数目n的子集树。然后从根节点开始，以深度优先的方式开始搜索，判断物品能够装入背包则进入左结点，否则将左结点剪枝进入右结点，在搜索的过程中同时利用限界函数进行剪枝，直达搜索结束即可得到最优解。\r\n\r\n**分支限界法：**使用分支限界法求解0-1背包问题与回溯法类似，首先也要定义问题的解空间树，但是搜索的方法则采用广度优先搜索的方式搜索解空间树，在搜索的过程中同时利用限界函数进行剪枝，直达搜索结束即可得到最优解。\r\n\r\n### 5种求解0-1背包策略的比较\r\n\r\n| **算法** | **时间复杂度**     | **优点**           | **缺点**                  |\r\n| ------ | ------------- | ---------------- | ----------------------- |\r\n| 穷举法    | O(2n)         | 对于n比较小，穷举方法简单易懂  | 当n比较大时，时间复杂度以指数增长，求解速度慢 |\r\n| 贪心法    | O(n)          | 可以达到局部最优解，用时少    | 往往得不到最优解，得到的是近似最优解      |\r\n| 动态规划   | O(min{nW,2n}) | 可求得最优决策序列        | 速度较慢                    |\r\n| 回溯法    | O(n2n)        | 相对于分支限界法思路更加容易理解 | 时间复杂度较高                 |\r\n| 分支限界法  | O(2n)         | 速度较快，易求解         | 占用的内存较大，效率不高            |\r\n');

-- ----------------------------
-- Table structure for t_category
-- ----------------------------
DROP TABLE IF EXISTS `t_category`;
CREATE TABLE `t_category` (
  `category_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT '目录ID',
  `category_name` varchar(60) DEFAULT NULL COMMENT '目录名字',
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_category
-- ----------------------------
INSERT INTO `t_category` VALUES ('1', 'JavaSE');
INSERT INTO `t_category` VALUES ('2', 'JavaEE');
INSERT INTO `t_category` VALUES ('3', 'SQL');
INSERT INTO `t_category` VALUES ('4', 'Web');
INSERT INTO `t_category` VALUES ('5', '计算机网络');
INSERT INTO `t_category` VALUES ('6', 'Git');
INSERT INTO `t_category` VALUES ('7', 'C');
INSERT INTO `t_category` VALUES ('8', '计算机组成原理');
INSERT INTO `t_category` VALUES ('9', '算法设计与分析');
INSERT INTO `t_category` VALUES ('10', '操作系统');
INSERT INTO `t_category` VALUES ('11', 'Linux');
INSERT INTO `t_category` VALUES ('12', 'Java虚拟机');
INSERT INTO `t_category` VALUES ('13', '数字逻辑电路');
INSERT INTO `t_category` VALUES ('14', '其他');

-- ----------------------------
-- Table structure for t_permission
-- ----------------------------
DROP TABLE IF EXISTS `t_permission`;
CREATE TABLE `t_permission` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '权限id',
  `name` varchar(30) DEFAULT NULL COMMENT '权限名',
  `name_zh` varchar(30) DEFAULT NULL COMMENT '权限名_中文',
  `info` varchar(100) DEFAULT NULL COMMENT '描述',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_permission
-- ----------------------------
INSERT INTO `t_permission` VALUES ('1', 'admin', '管理员', '拥有最高授权');
INSERT INTO `t_permission` VALUES ('2', 'vip1', 'VIP1', '顶级会员');

-- ----------------------------
-- Table structure for t_sessions
-- ----------------------------
DROP TABLE IF EXISTS `t_sessions`;
CREATE TABLE `t_sessions` (
  `id` varchar(200) NOT NULL,
  `session` varchar(2000) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_sessions
-- ----------------------------
INSERT INTO `t_sessions` VALUES ('0212e963-782c-4a9d-aa96-f0190f7eade9', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDAyMTJlOTYzLTc4MmMtNGE5ZC1hYTk2LWYwMTkwZjdlYWRlOXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3vnGMxeHNxAH4AA3cIAAABXe+c5wJ4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ACkwACnJlcXVlc3RVUklxAH4ACnhwdAADR0VUcHQAAS94eA==');
INSERT INTO `t_sessions` VALUES ('03492c92-3893-4aed-851c-9c7f64e79b58', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDAzNDkyYzkyLTM4OTMtNGFlZC04NTFjLTljN2Y2NGU3OWI1OHNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3a7DRfeHEAfgAEdxMAAAAAABt3QAAJMTI3LjAuMC4xc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ACUwACnJlcXVlc3RVUklxAH4ACXhwdAADR0VUcHQAAS94eA==');
INSERT INTO `t_sessions` VALUES ('049b929b-d042-4032-9e94-732d8001a69e', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDA0OWI5MjliLWQwNDItNDAzMi05ZTk0LTczMmQ4MDAxYTY5ZXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV37gMLfeHNxAH4AA3cIAAABXfuAwzp4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ACkwACnJlcXVlc3RVUklxAH4ACnhwdAADR0VUcHQAES9hcnRpY2xlL2NhdGVnb3J5eHg=');
INSERT INTO `t_sessions` VALUES ('14efce2f-5847-4e5b-84d4-bb9367d7b02c', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDE0ZWZjZTJmLTU4NDctNGU1Yi04NGQ0LWJiOTM2N2Q3YjAyY3NyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3aNCAHeHNxAH4AA3cIAAABXdo0VJB4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQAAS90ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AFBvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfQVVUSEVOVElDQVRFRF9TRVNTSU9OX0tFWXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAF0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAABA/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgAceHh4');
INSERT INTO `t_sessions` VALUES ('17a2e97d-8018-4963-b999-605b158bca5f', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDE3YTJlOTdkLTgwMTgtNDk2My1iOTk5LTYwNWIxNThiY2E1ZnNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3a3SkOeHEAfgAEdxMAAAAAABt3QAAJMTI3LjAuMC4xc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ACUwACnJlcXVlc3RVUklxAH4ACXhwdAADR0VUcHQAAS94eA==');
INSERT INTO `t_sessions` VALUES ('361bc684-e2e9-4a35-bd47-336c4752e560', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDM2MWJjNjg0LWUyZTktNGEzNS1iZDQ3LTMzNmM0NzUyZTU2MHNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3QcLU3eHNxAH4AA3cIAAABXdB1o+d4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQAAS90ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AFBvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfQVVUSEVOVElDQVRFRF9TRVNTSU9OX0tFWXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAF0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgAceHh4');
INSERT INTO `t_sessions` VALUES ('3ca8ee29-b9d3-4801-be2a-33a2b2b1271c', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDNjYThlZTI5LWI5ZDMtNDgwMS1iZTJhLTMzYTJiMmIxMjcxY3NyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3vh5X4eHNxAH4AA3cIAAABXe+Hljl4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ACkwACnJlcXVlc3RVUklxAH4ACnhwdAADR0VUcHQAAS94eA==');
INSERT INTO `t_sessions` VALUES ('45e64dc9-948e-4234-ba6a-e2f970d29b62', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDQ1ZTY0ZGM5LTk0OGUtNDIzNC1iYTZhLWUyZjk3MGQyOWI2MnNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3PRPjIeHNxAH4AA3cIAAABXc9IMqh4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ACkwACnJlcXVlc3RVUklxAH4ACnhwdAADR0VUcHQAAS94eA==');
INSERT INTO `t_sessions` VALUES ('47fa5720-2ed8-4280-b1e0-48af350a5a6b', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDQ3ZmE1NzIwLTJlZDgtNDI4MC1iMWUwLTQ4YWYzNTBhNWE2YnNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3fSRtleHNxAH4AA3cIAAABXd/chZV4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAR0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgATeHh4');
INSERT INTO `t_sessions` VALUES ('4a830f38-9ff6-433c-b526-ec595f8fb399', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDRhODMwZjM4LTlmZjYtNDMzYy1iNTI2LWVjNTk1ZjhmYjM5OXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV4OSD5geHNxAH4AA3cIAAABXg5MT+J4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQAAS90ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AFBvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfQVVUSEVOVElDQVRFRF9TRVNTSU9OX0tFWXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAF0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgAceHh4');
INSERT INTO `t_sessions` VALUES ('4c46e32a-9827-48d6-ab4a-bef8004a87d0', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDRjNDZlMzJhLTk4MjctNDhkNi1hYjRhLWJlZjgwMDRhODdkMHNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3gXwFWeHNxAH4AA3cIAAABXeBfAZl4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAR0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgATeHh4');
INSERT INTO `t_sessions` VALUES ('633d4c34-353f-4af1-9695-ba89da59497e', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDYzM2Q0YzM0LTM1M2YtNGFmMS05Njk1LWJhODlkYTU5NDk3ZXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3v0SCweHNxAH4AA3cIAAABXfACwXd4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQAAS90ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AFBvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfQVVUSEVOVElDQVRFRF9TRVNTSU9OX0tFWXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAF0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgAceHh4');
INSERT INTO `t_sessions` VALUES ('69612c9f-5e01-4433-adab-2752460f2d69', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDY5NjEyYzlmLTVlMDEtNDQzMy1hZGFiLTI3NTI0NjBmMmQ2OXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3vgzzDeHNxAH4AA3cIAAABXe+DbcB4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQAAS90ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AFBvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfQVVUSEVOVElDQVRFRF9TRVNTSU9OX0tFWXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAF0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAABA/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgAceHh4');
INSERT INTO `t_sessions` VALUES ('6ef48d94-4f0c-4179-8f0b-e801ed3052c8', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDZlZjQ4ZDk0LTRmMGMtNDE3OS04ZjBiLWU4MDFlZDMwNTJjOHNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3P4m8IeHNxAH4AA3cIAAABXdBQ0uR4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQAAS90ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AFBvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfQVVUSEVOVElDQVRFRF9TRVNTSU9OX0tFWXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAF0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgAceHh4');
INSERT INTO `t_sessions` VALUES ('6f7346e8-6319-435c-b45d-d18dd171506c', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDZmNzM0NmU4LTYzMTktNDM1Yy1iNDVkLWQxOGRkMTcxNTA2Y3NyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3a7DnxeHNxAH4AA3cIAAABXdrsOk14dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAR0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgATeHh4');
INSERT INTO `t_sessions` VALUES ('756cab05-2c4d-4197-9bd7-564936b9e6f1', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDc1NmNhYjA1LTJjNGQtNDE5Ny05YmQ3LTU2NDkzNmI5ZTZmMXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV36r6lUeHNxAH4AA3cIAAABXftSN2Z4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAR0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgATeHh4');
INSERT INTO `t_sessions` VALUES ('8f6837ac-db98-4211-970e-2d4430267c07', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDhmNjgzN2FjLWRiOTgtNDIxMS05NzBlLTJkNDQzMDI2N2MwN3NyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3a3EeMeHEAfgAEdxMAAAAAABt3QAAJMTI3LjAuMC4xc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ACUwACnJlcXVlc3RVUklxAH4ACXhwdAADR0VUcHQAAS94eA==');
INSERT INTO `t_sessions` VALUES ('98b205a0-88d4-44f9-bb7e-614299ffad28', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJDk4YjIwNWEwLTg4ZDQtNDRmOS1iYjdlLTYxNDI5OWZmYWQyOHNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3QUHlxeHNxAH4AA3cIAAABXdBQo8l4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQADC9hcnRpY2xlL25ld3QAFldFQlNFU1NJT05fQURNSU5BVkFUQVJ0AFlodHRwczovL3NzMC5iZHN0YXRpYy5jb20vN0xzMGE4U20xQTVCcGhHbG5ZRy9zeXMvcG9ydHJhaXQvaXRlbS8xYTY3MzEzNTM4MzIzMzM3MzYzMjM3YWIwNnQAUG9yZy5hcGFjaGUuc2hpcm8uc3ViamVjdC5zdXBwb3J0LkRlZmF1bHRTdWJqZWN0Q29udGV4dF9BVVRIRU5USUNBVEVEX1NFU1NJT05fS0VZc3IAEWphdmEubGFuZy5Cb29sZWFuzSBygNWc+u4CAAFaAAV2YWx1ZXhwAXQATW9yZy5hcGFjaGUuc2hpcm8uc3ViamVjdC5zdXBwb3J0LkRlZmF1bHRTdWJqZWN0Q29udGV4dF9QUklOQ0lQQUxTX1NFU1NJT05fS0VZc3IAMm9yZy5hcGFjaGUuc2hpcm8uc3ViamVjdC5TaW1wbGVQcmluY2lwYWxDb2xsZWN0aW9uqH9YJcajCEoDAAFMAA9yZWFsbVByaW5jaXBhbHN0AA9MamF2YS91dGlsL01hcDt4cHNyABdqYXZhLnV0aWwuTGlua2VkSGFzaE1hcDTATlwQbMD7AgABWgALYWNjZXNzT3JkZXJ4cQB+AAY/QAAAAAAADHcIAAAAEAAAAAF0ACZjbi53YXluZWNodS50b3BibG9nLnNoaXJvLlNoaXJvUmVhbG1fMHNyABdqYXZhLnV0aWwuTGlua2VkSGFzaFNldNhs11qV3SoeAgAAeHIAEWphdmEudXRpbC5IYXNoU2V0ukSFlZa4tzQDAAB4cHcMAAAAED9AAAAAAAABc3IADmphdmEubGFuZy5Mb25nO4vkkMyPI98CAAFKAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAAAAAACeHgAdwEBcQB+ABx4eHg=');
INSERT INTO `t_sessions` VALUES ('a8c9aba7-2c7f-492f-97f1-a84268dadfea', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJGE4YzlhYmE3LTJjN2YtNDkyZi05N2YxLWE4NDI2OGRhZGZlYXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3R9BjoeHNxAH4AA3cIAAABXdH8dj94dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQAAS90ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AFBvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfQVVUSEVOVElDQVRFRF9TRVNTSU9OX0tFWXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAF0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgAceHh4');
INSERT INTO `t_sessions` VALUES ('aa44ccbe-41dc-4818-a811-11ed2b3e56e7', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJGFhNDRjY2JlLTQxZGMtNDgxOC1hODExLTExZWQyYjNlNTZlN3NyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV4ETOXVeHNxAH4AA3cIAAABXgRM5i54dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ACkwACnJlcXVlc3RVUklxAH4ACnhwdAADR0VUcHQAAS94eA==');
INSERT INTO `t_sessions` VALUES ('c13fe03c-7036-40d3-9a94-0776fcc9953a', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJGMxM2ZlMDNjLTcwMzYtNDBkMy05YTk0LTA3NzZmY2M5OTUzYXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV31z4SweHNxAH4AA3cIAAABXfX14Id4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAR0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgATeHh4');
INSERT INTO `t_sessions` VALUES ('d6a5234e-8789-4e7d-8918-f4af93bcdbc5', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJGQ2YTUyMzRlLTg3ODktNGU3ZC04OTE4LWY0YWY5M2JjZGJjNXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3aQ1lzeHNxAH4AA3cIAAABXdpFpIN4dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAZ0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABFzaGlyb1NhdmVkUmVxdWVzdHNyACZvcmcuYXBhY2hlLnNoaXJvLndlYi51dGlsLlNhdmVkUmVxdWVzdK/OPK15gsq6AgADTAAGbWV0aG9kdAASTGphdmEvbGFuZy9TdHJpbmc7TAALcXVlcnlTdHJpbmdxAH4ADkwACnJlcXVlc3RVUklxAH4ADnhwdAADR0VUcHQAAS90ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AFBvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfQVVUSEVOVElDQVRFRF9TRVNTSU9OX0tFWXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAF0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAABA/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgAceHh4');
INSERT INTO `t_sessions` VALUES ('f8d4bd19-064e-45df-ae48-6dfe5b91aeac', 'rO0ABXNyACpvcmcuYXBhY2hlLnNoaXJvLnNlc3Npb24ubWd0LlNpbXBsZVNlc3Npb26dHKG41YxibgMAAHhwdwIA23QAJGY4ZDRiZDE5LTA2NGUtNDVkZi1hZTQ4LTZkZmU1YjkxYWVhY3NyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAV3Q03QueHNxAH4AA3cIAAABXdIYdv14dxkAAAAAABt3QAAPMDowOjA6MDowOjA6MDoxc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAR0ABhXRUJTRVNTSU9OX0FETUlOUk9MRU5BTUV0AAnnrqHnkIblkZh0ABhXRUJTRVNTSU9OX0FETUlOTklDS05BTUV0AAlXYXluZSBDaHV0ABZXRUJTRVNTSU9OX0FETUlOQVZBVEFSdABZaHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzdMczBhOFNtMUE1QnBoR2xuWUcvc3lzL3BvcnRyYWl0L2l0ZW0vMWE2NzMxMzUzODMyMzMzNzM2MzIzN2FiMDZ0AE1vcmcuYXBhY2hlLnNoaXJvLnN1YmplY3Quc3VwcG9ydC5EZWZhdWx0U3ViamVjdENvbnRleHRfUFJJTkNJUEFMU19TRVNTSU9OX0tFWXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHEAfgAGP0AAAAAAAAx3CAAAABAAAAABdAAmY24ud2F5bmVjaHUudG9wYmxvZy5zaGlyby5TaGlyb1JlYWxtXzBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hTZXTYbNdald0qHgIAAHhyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAnh4AHcBAXEAfgATeHh4');

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag` (
  `tag_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT '标签ID',
  `tag_name` varchar(60) DEFAULT NULL COMMENT '标签名称',
  PRIMARY KEY (`tag_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES ('1', 'JDBC');
INSERT INTO `t_tag` VALUES ('2', '数据库连接');
INSERT INTO `t_tag` VALUES ('3', '字符串格式化');
INSERT INTO `t_tag` VALUES ('4', '算法');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '序列id',
  `username` varchar(30) DEFAULT NULL COMMENT '用户名',
  `nickname` varchar(40) DEFAULT NULL COMMENT '昵称',
  `mobile` varchar(20) DEFAULT NULL COMMENT '电话',
  `email` varchar(50) DEFAULT NULL COMMENT '邮箱',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES ('1', 'zhuwei', 'Wayne Chu', '15538107627', 'waynechu1996@gmail.com');
INSERT INTO `t_user` VALUES ('2', 'user1', '用户1', '15500000001', '15500000001@topblog.com');

-- ----------------------------
-- Table structure for t_user_login
-- ----------------------------
DROP TABLE IF EXISTS `t_user_login`;
CREATE TABLE `t_user_login` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `login_type` varchar(10) DEFAULT NULL COMMENT '登录类型',
  `username` varchar(30) DEFAULT NULL COMMENT '用户名',
  `avatar` varchar(500) DEFAULT NULL COMMENT '头像',
  `password_hash` varchar(100) DEFAULT NULL COMMENT '密码Hash',
  `password_salt` varchar(100) DEFAULT NULL COMMENT '密码Salt',
  `password_algo` varchar(20) DEFAULT NULL COMMENT '加密方式',
  `password_iteration` int(11) DEFAULT NULL COMMENT '加密次数',
  `disabled` tinyint(1) DEFAULT '0' COMMENT '帐号禁用',
  `locked` tinyint(1) DEFAULT '0' COMMENT '帐号锁定',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_user_login
-- ----------------------------
INSERT INTO `t_user_login` VALUES ('1', 'user', 'zhuwei', 'https://ss0.bdstatic.com/7Ls0a8Sm1A5BphGlnYG/sys/portrait/item/1a67313538323337363237ab06', '14ffa59e97a99a66b172607e2a889c53554958a2', 'c4516b44f03e5fee498d90f131780870', 'SHA-1', '1024', '0', '0');
INSERT INTO `t_user_login` VALUES ('2', 'admin', 'zhuwei', 'https://ss0.bdstatic.com/7Ls0a8Sm1A5BphGlnYG/sys/portrait/item/1a67313538323337363237ab06', '14ffa59e97a99a66b172607e2a889c53554958a2', 'c4516b44f03e5fee498d90f131780870', 'SHA-1', '1024', '0', '0');
INSERT INTO `t_user_login` VALUES ('3', 'user', 'user1', null, '14ffa59e97a99a66b172607e2a889c53554958a2', 'c4516b44f03e5fee498d90f131780870', 'SHA-1', '1024', '0', '0');
INSERT INTO `t_user_login` VALUES ('4', 'admin', 'admin1', null, '14ffa59e97a99a66b172607e2a889c53554958a2', 'c4516b44f03e5fee498d90f131780870', 'SHA-1', '1024', '0', '0');

-- ----------------------------
-- Table structure for t_user_permissions
-- ----------------------------
DROP TABLE IF EXISTS `t_user_permissions`;
CREATE TABLE `t_user_permissions` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '序列id',
  `login_user_id` bigint(20) DEFAULT NULL COMMENT '登陆的用户id',
  `permission_id` bigint(20) DEFAULT NULL COMMENT '用户权限id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_user_permissions
-- ----------------------------
INSERT INTO `t_user_permissions` VALUES ('1', '2', '1');
INSERT INTO `t_user_permissions` VALUES ('2', '2', '2');
INSERT INTO `t_user_permissions` VALUES ('3', '4', '1');
